<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{"currentConversationId":"2475d657-3bfb-4b9a-a3d8-c80e15bdd435","conversations":{"298edf93-96de-464b-af37-10a5debc50f2":{"id":"298edf93-96de-464b-af37-10a5debc50f2","name":"Welcome to the Augment Agent","createdAtIso":"2025-04-05T10:55:43.021Z","lastInteractedAtIso":"2025-04-05T10:55:43.021Z","chatHistory":[{"request_id":"63c7eff3-22b0-4db9-939c-7ee62b675517","uuid":"d7e551b8-37bf-4e65-bf3e-1a4cdff8b352","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":0,"toTimestamp":1743850543021,"seen_state":"seen"}],"feedbackStates":{},"toolUseStates":{},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"mentioned_items":[],"status":"draft"},"draftActiveContextIds":["D:/code/CodeHem/codehem2/tests/python/conftest.py","D:/code/CodeHemfalsefalse","agentMemories"],"requestIds":[],"isPinned":false,"isShareable":false,"extraData":{"isAgentConversation":true,"hasAgentOnboarded":true,"hasDirtyEdits":false}},"2475d657-3bfb-4b9a-a3d8-c80e15bdd435":{"id":"2475d657-3bfb-4b9a-a3d8-c80e15bdd435","createdAtIso":"2025-04-05T10:57:35.579Z","lastInteractedAtIso":"2025-04-06T06:45:51.818Z","chatHistory":[{"request_id":"af8b919d-9de9-4c85-9a98-cf712b8d2776","uuid":"4be5108d-2605-4d81-ae61-77e356b7401c","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":0,"toTimestamp":1743850655580,"seen_state":"seen"},{"status":"success","request_id":"710e01a7-9e38-4290-9fac-6501b1c4c8f2","request_message":"o czym jest ten codebase?","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"o czym jest ten codebase?"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01UwvaR5rrjd3xCDCoYK9Vnp","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find main files, README, or any documentation that explains what this codebase is about. Look for project structure, purpose, and main functionality.\"}"}},{"id":0,"type":0,"content":"I'll help you understand what this codebase is about. Let me explore it to give you a comprehensive overview.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"o czym jest ten codebase?"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/code/CodeHem","folderRoot":"D:/code/CodeHem"}],"workspaceFoldersUnchanged":false}}],"response_text":"I'll help you understand what this codebase is about. Let me explore it to give you a comprehensive overview.\n","workspace_file_chunks":[]},{"status":"success","request_id":"a8b30d73-d308-40a5-a290-d1a3e2068baa","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"Based on my exploration of the codebase, I can provide you with an overview of what CodeHem is about:\n\n## CodeHem Overview\n\nCodeHem is a language-agnostic library designed for sophisticated querying and manipulation of source code. It provides tools to navigate, analyze, and modify code elements such as functions, classes, methods, and properties across multiple programming languages.\n\n### Key Features\n\n1. **Code Querying**: Locate code elements (functions, classes, methods, properties, imports) using a uniform API\n2. **Code Manipulation**: Replace, add, or remove code elements while preserving syntax integrity\n3. **Syntax-aware Operations**: Uses tree-sitter parser to ensure accurate manipulation\n4. **Language Detection**: Automatically identifies programming languages from code or file extensions\n5. **Extensible Architecture**: Supports adding new programming languages through a strategy pattern\n\n### Currently Supported Languages\n\n- Python\n- JavaScript/TypeScript (including TSX)\n\n### Main Components\n\nThe codebase is organized into several key modules:\n\n1. **Core Engine**: Includes XPath parsing and services for extraction and manipulation\n2. **Language Services**: Language-specific implementations for different programming languages\n3. **Registry System**: Central registry for components like language detectors, extractors, and manipulators\n4. **Models**: Defines code elements, XPath expressions, and other data structures\n\n### Main Usage\n\nThe main entry point is the `CodeHem` class, which provides methods to:\n- Extract code elements from source code\n- Find elements using XPath-like expressions\n- Manipulate code by adding, replacing, or removing elements\n- Query code structure\n\nThe library seems to be designed for both programmatic use and potentially as a foundation for developer tools that need to understand and modify code.\n\nWould you like me to explore any specific aspect of the codebase in more detail?\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: codehem/main.py\nimport os\nimport logging\nfrom typing import List, Optional, Tuple\n\nfrom .core.engine.xpath_parser import XPathParser\nfrom .core.extraction_service import ExtractionService\nfrom .core.manipulation_service import ManipulationService\nfrom .languages import (\n    get_language_service,\n    get_language_service_for_code,\n    get_language_service_for_file,\n    get_supported_languages,\n)\nfrom .models.code_element import CodeElement, CodeElementsResult\nfrom .models.enums import CodeElementType\nfrom .models.xpath import CodeElementXPathNode\n\nlogger = logging.getLogger(__name__)\n\nclass CodeHem:\n    \"\"\"\n    Main entry point for CodeHem.\n    Provides language-agnostic interface for code manipulation.\n    \"\"\"\n\n    def __init__(self, language_code: str):\n        \"\"\"\n        Initialize CodeHem for a specific language.\n\n        Args:\n            language_code: Language code (e.g., 'python', 'typescript')\n\n        Raises:\n            ValueError: If the language is not supported\n        \"\"\"\n        self.language_service = get_language_service(language_code)\n        if not self.language_service:\n            raise ValueError(f\"Unsupported language: {language_code}\")\n...\n\n    @classmethod\n    def from_raw_code(cls, code: str) -> \"CodeHem\":\n        \"\"\"\n        Create a CodeHem instance by detecting language from code.\n\n        Args:\n            code: Source code as string\n\n        Returns:\n            CodeHem instance\n\n        Raises:\n            ValueError: If the language could not be detected\n        \"\"\"\n        language_service = get_language_service_for_code(code)\n        if not language_service:\n            # Raise error instead of defaulting to Python\n            raise ValueError(\"Could not detect language from code\")\n            # return cls('python') # Old behavior\n        return cls(language_service.language_code)\n\n    @staticmethod\n    def supported_languages() -> List[str]:\n        \"\"\"\n        Get a list of supported language codes.\n\n        Returns:\n            List of supported language codes\n        \"\"\"\n        return get_supported_languages()\n...\n\n    def upsert_element(\n        self,\n        original_code: str,\n        element_type: str,\n        name: str,\n        new_code: str,\n        parent_name: Optional[str] = None,\n    ) -> str:\n        \"\"\"\n        Add or replace an element in the code.\n\n        Args:\n            original_code: Original source code\n            element_type: Type of element to add/replace (from CodeElementType)\n            name: Name of the element\n            new_code: New content for the element\n            parent_name: Name of parent element (e.g., class name for methods)\n\n        Returns:\n            Modified code\n        \"\"\"\n        if not self.manipulation:\n             raise RuntimeError(\"Manipulation service not initialized.\")\n        return self.manipulation.upsert_element(\n            original_code, element_type, name, new_code, parent_name\n        )\n...\n\n    def upsert_element_by_xpath(\n        self, original_code: str, xpath: str, new_code: str\n    ) -> str:\n        \"\"\"\n        Add or replace an element in the code using XPath expression.\n        Automatically prepends \"FILE.\" if missing.\n\n        Args:\n            original_code: Original source code\n            xpath: XPath expression (e.g., 'ClassName.method_name', 'ClassName[interface].method_name[property_getter]')\n            new_code: New content for the element\n\n        Returns:\n            Modified code\n        \"\"\"\n        if not self.manipulation:\n            raise RuntimeError(\"Manipulation service not initialized.\")\n        # Ensure xpath starts with FILE. before passing to manipulation service\n        processed_xpath = self._ensure_file_prefix(xpath)\n        return self.manipulation.upsert_element_by_xpath(\n            original_code, processed_xpath, new_code\n        )\n\n    # --- ZMIANA: Wykorzystanie _ensure_file_prefix ---\n    def find_by_xpath(self, code: str, xpath: str) -> Tuple[int, int]:\n        \"\"\"\n        Find an element's location using an XPath expression.\n        Automatically prepends \"FILE.\" if missing.\n\n        Args:\n            code: Source code as string\n            xpath: XPath expression (e.g., 'ClassName.method_name', 'ClassName[interface].method_name[property_getter]')\n\n        Returns:\n            Tuple of (start_line, end_line) or (0, 0) if not found\n        \"\"\"\n        if not self.extraction:\n             raise RuntimeError(\"Extraction service not initialized.\")\n        processed_xpath = self._ensure_file_prefix(xpath)\n        return self.extraction.find_by_xpath(code, processed_xpath)\n...\n\n        Returns:\n            Text content of the element, or None if not found\n        \"\"\"\n        if not self.language_service:\n            raise RuntimeError(\"Language service not initialized.\")\n        # Ensure xpath starts with FILE. before parsing\n        processed_xpath = self._ensure_file_prefix(xpath)\n        try:\n            # Parse the potentially modified xpath\n            xpath_nodes = XPathParser.parse(processed_xpath)\n            if not xpath_nodes:\n                 logger.warning(f\"Could not parse XPath: '{processed_xpath}'\")\n                 return None\n            # Call internal method with parsed nodes\n            return self.language_service.get_text_by_xpath_internal(code, xpath_nodes)\n        except Exception as e:\n             logger.error(f\"Error getting text by XPath '{xpath}' (processed: '{processed_xpath}'): {e}\", exc_info=True)\n             return None\n\n    def extract(self, code: str) -> CodeElementsResult:\n        \"\"\"\n        Extract code elements from the source code.\n\n        Args:\n            code: Source code as string\n\n        Returns:\n            CodeElementsResult containing extracted elements\n        \"\"\"\n        if not self.extraction:\n             raise RuntimeError(\"Extraction service not initialized.\")\n        return self.extraction.extract_all(code)\n\n    @staticmethod\n    def _ensure_file_prefix_static(xpath: str) -> str:\n        \"\"\"Static helper to ensure XPath starts with FILE.\"\"\"\n        root_prefix = XPathParser.ROOT_ELEMENT + \".\"\n        if not xpath.startswith(root_prefix) and not xpath.startswith(\"[\"):\n            # Note: Static method doesn't have logger instance easily\n            # print(f\"DEBUG: XPath '{xpath}' does not start with '{root_prefix}'. Prepending it.\")\n            xpath = root_prefix + xpath\n        return xpath\n\n    @staticmethod\n    def filter(elements: CodeElementsResult, xpath: str = \"\") -> Optional[CodeElement]:\n        \"\"\"\n        Filter code elements based on XPath expression.\n        Automatically prepends \"FILE.\" if missing.\n\n        Args:\n            elements: CodeElementsResult containing elements\n            xpath: XPath expression (e.g., 'ClassName.method_name', 'ClassName[interface].method_name[property_getter]')\n\n        Returns:\n            Matching CodeElement or None if not found\n        \"\"\"\n        if not xpath or not elements or not hasattr(elements, 'elements') or not elements.elements:\n            return None\n\n        # Ensure xpath starts with FILE. before parsing\n        processed_xpath = CodeHem._ensure_file_prefix_static(xpath)\n\n        try:\n            # Parse the potentially modified xpath\n            element_name, parent_name, element_type = XPathParser.get_element_info(processed_xpath)\n...\nPath: README.md\n# CodeHem\n\nCodeHem is a language-agnostic library designed for sophisticated querying and manipulation of source code. \nIt provides a high-level interface to effortlessly navigate, analyze, and modify code elements such as functions, \nclasses, methods, and properties across multiple programming languages, including Python, JavaScript, and TypeScript.\n\n## Key Features\n\n- **Advanced Code Querying**: Easily locate functions, classes, methods, properties, imports, and more within your source code, using a uniform, intuitive API.\n- **Powerful Code Manipulation**: Replace, add, or remove functions, methods, classes, properties, or entire code sections with minimal effort.\n- **Syntax-aware Operations**: Ensures accurate manipulation preserving syntax integrity through the `tree-sitter` parser.\n- **Language Detection**: Automatically identifies the programming language based on file extensions or code analysis.\n- **Extensible Architecture**: Easily add support for new programming languages through the strategy pattern.\n\n## Supported Languages\n\n- Python\n- JavaScript / TypeScript (including TSX)\n\n## Installation\n\n### Using pip / pipx\n\nThe simplest way to install CodeHem:\n\n```bash\npip install codehem\n````\nor\n\n```bash\npipx install codehem\n````\n\n## Project Structure\n\n```\nCodeHem/\n├── ast_handler.py            # Unified interface for AST operations\n├── caching/                  # Performance optimization through caching\n│   ├── __init__.py\n│   └── cache_manager.py\n│\n├── finder/                   # Code element location\n│   ├── base.py               # Abstract base class for querying code elements\n│   ├── factory.py            # Factory for creating code finders\n│   └── lang/\n│       ├── python_code_finder.py\n│       └── typescript_code_finder.py\n│\n├── formatting/               # Code formatting system\n│   ├── __init__.py\n│   ├── formatter.py          # Base formatter class\n│   ├── python_formatter.py   # Python-specific formatter\n│   └── typescript_formatter.py # TypeScript-specific formatter\n│\n├── language_handler.py       # High-level language handling interface (LangHem)\n├── languages.py              # Language definitions and parsers\n│\n├── manipulator/              # Code manipulation\n│   ├── abstract.py           # Abstract interface for code manipulators\n│   ├── base.py               # Base implementation\n│   ├── factory.py            # Factory for manipulators\n│   └── lang/\n│       ├── python_manipulator.py\n│       └── typescript_manipulator.py\n│\n├── query_builder.py          # Unified query construction\n│\n├── strategies/               # Strategy pattern for language-specific operations\n│   ├── __init__.py\n│   ├── language_strategy.py  # Abstract strategy interface\n│   ├── python_strategy.py    # Python-specific strategy\n│   └── typescript_strategy.py # TypeScript-specific strategy\n│\n├── templates/                # Templates for adding new languages\n│   └── new_language_template.py\n│\n└── utils/\n    └── logs.py               # Logging utilities\n## Usage Example\n\n### Querying Code\n\nhandler = CodeHem('python')\n\ncode = '''\nclass Example:\n    def greet(self):\n        print(\"Hello\")\n'''\n\n# Find method location\nstart, end = handler.finder.find_method(code, 'Example', 'greet')\nprint(f'Method found from line {start} to {end}')\n### Manipulating Code\n\n\noriginal_code = '''\ndef greet():\n    print(\"Hello\")\n'''\n\nnew_function = '''\ndef greet():\n    print(\"Hello, World!\")\n'''\n\nmodified_code = handler.manipulator.replace_function(original_code, 'greet', new_function)\n```\n\n## Contributing\n\nWe warmly welcome contributions, whether it's through reporting issues, suggesting enhancements, or submitting pull requests. Feel free to participate!\n\n## License\n\nThis project is licensed under the MIT license. See `LICENSE` for details....\nPath: codehem2/languages/detection.py\n...\n\n        # Boost confidence for short snippets with strong indicators\n        if num_lines < 10 and score > 30:\n            confidence = max(confidence, 0.7)\n        if num_lines < 5 and score > 15:\n             confidence = max(confidence, 0.6)\n\n        logger.debug(f\"Python detection confidence: {confidence:.2f} (Score: {score}, Lines: {num_lines})\")\n        return confidence\n\n# TODO: Add detectors for TypeScript, JavaScript etc.\n# class TypeScriptLanguageDetector(BaseLanguageDetector): ...\n\n# --- Detection Function ---\n\n_DETECTORS: List[BaseLanguageDetector] = [\n    PythonLanguageDetector(),\n    # Add other detector instances here\n    # TypeScriptLanguageDetector(),\n]\n...\n\n    best_match: Optional[str] = None\n    highest_confidence: float = 0.0\n    min_confidence_threshold = 0.3 # Minimum confidence to consider a match\n\n    logger.debug(f\"Attempting language detection for code snippet (length: {len(code)}).\")\n\n    for detector in _DETECTORS:\n        try:\n            confidence = detector.detect_confidence(code)\n            logger.debug(f\"  Detector '{detector.language_code}' confidence: {confidence:.3f}\")\n            if confidence > highest_confidence and confidence >= min_confidence_threshold:\n                highest_confidence = confidence\n                best_match = detector.language_code\n        except Exception as e:\n            logger.error(f\"Error running detector {detector.language_code}: {e}\", exc_info=False)\n...\nPath: codehem/languages/__init__.py\n...\n\ndef get_language_service_for_code(code: str) -> Optional[LanguageService]:\n    \"\"\"\n    Attempt to detect language from code content.\n    This is a heuristic approach and not 100% reliable.\n    \"\"\"\n    if not code.strip():\n        return None\n    \n    results = []\n    # Use all available detectors\n    for language_code in registry.get_supported_languages():\n        detector = registry.get_language_detector(language_code)\n        if detector:\n            confidence = detector.detect_confidence(code)\n            logger.debug(f\"Language detection confidence for {language_code}: {confidence}\")\n            if confidence > 0:\n                results.append((language_code, confidence))\n    \n    if not results:\n        logger.debug(\"No language detected\")\n        return None\n    \n    # Sort by confidence score\n    results.sort(key=lambda x: x[1], reverse=True)\n    logger.debug(f\"Best language match: {results[0][0]} with confidence {results[0][1]}\")\n    \n    # Use the language with the highest confidence if it's above a threshold\n    if results[0][1] > 0.5:\n        return get_language_service(results[0][0])\n    \n    # Fallback to basic pattern matching\n    if re.search('def\\\\s+\\\\w+\\\\s*\\\\(', code) and re.search(':\\\\s*\\\\n', code):\n        return get_language_service('python')\n    elif re.search('function\\\\s+\\\\w+\\\\s*\\\\(', code) or re.search(':\\\\s*\\\\w+', code):\n        return get_language_service('typescript')\n    \n    return None\n\ndef get_supported_languages() -> List[str]:\n    \"\"\"Get a list of all supported language codes.\"\"\"\n    return registry.get_supported_languages()...\nPath: codehem/core/registry.py\n...\n\nclass Registry:\n    \"\"\"Central registry for CodeHem components.\"\"\"\n    _instance = None\n\n    def __init__(self):\n        self._initialized = False\n        self._initialize()\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Registry, cls).__new__(cls)\n        return cls._instance\n\n    def _initialize(self):\n        \"\"\"Initializes empty registries.\"\"\"\n        if hasattr(self, '_initialized') and self._initialized:\n            return\n        self.language_detectors = {}\n        self.language_services = {}\n        self.all_descriptors = {}\n        self.all_extractors = {}\n        self.all_manipulators = {}\n        self.discovered_modules = set()\n        self.language_service_instances = {}\n        self._initialized = False\n        logger.debug('Registry _initialize completed.')\n...\n\n    def register_language_service(self, cls: Type[LanguageService]):\n        \"\"\"Registers a language service class.\"\"\"\n        try:\n            language_code = cls.LANGUAGE_CODE.lower()\n            if language_code in self.language_services:\n                logger.warning(f\"Language service for '{language_code}' is already registered ({self.language_services[language_code].__name__}). Overwriting with {cls.__name__}.\")\n            self.language_services[language_code] = cls\n            rich.print(f'Registered language service: {cls.__name__} for {language_code}')\n        except Exception as e:\n            logger.error(f'Error during registration of language service {cls.__name__}: {e}', exc_info=True)\n        return cls\n\n    def register_extractor(self, cls: Type[BaseExtractor]):\n        \"\"\"Registers an extractor class.\"\"\"\n        try:\n            language_code = cls.LANGUAGE_CODE.lower()\n            element_type = cls.ELEMENT_TYPE.value.lower()\n            extractor_key = f'{language_code}/{element_type}'\n            if extractor_key in self.all_extractors:\n                logger.warning(f\"Extractor for '{extractor_key}' is already registered ({self.all_extractors[extractor_key].__name__}). Overwriting with {cls.__name__}.\")\n            self.all_extractors[extractor_key] = cls\n            rich.print(f'Registered extractor: {cls.__name__} for {extractor_key}')\n        except Exception as e:\n            logger.error(f'Error during registration of extractor {cls.__name__}: {e}', exc_info=True)\n        return cls\n...\n\n    def initialize_components(self):\n        \"\"\"Discovers and initializes all components. Called once.\"\"\"\n        if self._initialized:\n            logger.debug('Components already initialized.')\n            return\n\n        logger.info('Starting CodeHem component initialization...')\n        self.discover_modules() # Discover components in the main package and subpackages\n        self._initialized = True\n        rich.print(f'Components initialized: {len(self.language_detectors)} detectors, {len(self.language_services)} services, {len(self.all_extractors)} extractors, {len(self.all_manipulators)} manipulators registered.')\n        logger.info('Component initialization finished.')\n\n# Global registry instance\nregistry = Registry()\n\n# Decorators for registration\ndef language_detector(cls):\n    \"\"\"Decorator for registering a language detector.\"\"\"\n    return registry.register_language_detector(cls)\n\ndef language_service(cls):\n    \"\"\"Decorator for registering a language service.\"\"\"\n    return registry.register_language_service(cls)\n\ndef extractor(cls):\n    \"\"\"Decorator for registering an extractor.\"\"\"\n    return registry.register_extractor(cls)\n\ndef manipulator(cls):\n    \"\"\"Decorator for registering a manipulator.\"\"\"\n    return registry.register_manipulator(cls)\n\ndef element_type_descriptor(cls):\n    \"\"\"Decorator for registering an element type descriptor.\"\"\"\n    return registry.register_element_type_descriptor(cls)...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01UwvaR5rrjd3xCDCoYK9Vnp"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/code/CodeHem","folderRoot":"D:/code/CodeHem"}],"workspaceFoldersUnchanged":false}}],"response_text":"Based on my exploration of the codebase, I can provide you with an overview of what CodeHem is about:\n\n## CodeHem Overview\n\nCodeHem is a language-agnostic library designed for sophisticated querying and manipulation of source code. It provides tools to navigate, analyze, and modify code elements such as functions, classes, methods, and properties across multiple programming languages.\n\n### Key Features\n\n1. **Code Querying**: Locate code elements (functions, classes, methods, properties, imports) using a uniform API\n2. **Code Manipulation**: Replace, add, or remove code elements while preserving syntax integrity\n3. **Syntax-aware Operations**: Uses tree-sitter parser to ensure accurate manipulation\n4. **Language Detection**: Automatically identifies programming languages from code or file extensions\n5. **Extensible Architecture**: Supports adding new programming languages through a strategy pattern\n\n### Currently Supported Languages\n\n- Python\n- JavaScript/TypeScript (including TSX)\n\n### Main Components\n\nThe codebase is organized into several key modules:\n\n1. **Core Engine**: Includes XPath parsing and services for extraction and manipulation\n2. **Language Services**: Language-specific implementations for different programming languages\n3. **Registry System**: Central registry for components like language detectors, extractors, and manipulators\n4. **Models**: Defines code elements, XPath expressions, and other data structures\n\n### Main Usage\n\nThe main entry point is the `CodeHem` class, which provides methods to:\n- Extract code elements from source code\n- Find elements using XPath-like expressions\n- Manipulate code by adding, replacing, or removing elements\n- Query code structure\n\nThe library seems to be designed for both programmatic use and potentially as a foundation for developer tools that need to understand and modify code.\n\nWould you like me to explore any specific aspect of the codebase in more detail?\n","workspace_file_chunks":[]},{"request_id":"d9ff9566-ba31-4e89-99d2-6f4e122d6dff","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"c1cce3c7-10a5-4772-836a-831a0e17040e","request_message":"czym sa manipulatory?","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"czym sa manipulatory?"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_016DNH7HcCqdaxCHGedsyRFZ","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find detailed information about manipulators in the codebase. Look for manipulator base classes, implementations, and how they're used. Focus on files in the manipulator directory and any related code that explains their purpose and functionality.\"}"}},{"id":0,"type":0,"content":"Let me explore the manipulator components in the CodeHem codebase to explain what they are and how they work.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"czym sa manipulatory?"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/code/CodeHem","folderRoot":"D:/code/CodeHem"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me explore the manipulator components in the CodeHem codebase to explain what they are and how they work.\n","workspace_file_chunks":[]},{"status":"success","request_id":"b5a0fb81-4214-4f8b-8cc7-497d50ddeb6a","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"## Manipulatory w CodeHem\n\nManipulatory (manipulators) w CodeHem to kluczowe komponenty odpowiedzialne za modyfikację kodu źródłowego. Oto szczegółowe wyjaśnienie:\n\n### Czym są manipulatory\n\nManipulatory to klasy, które implementują logikę do modyfikowania kodu źródłowego w sposób świadomy składni danego języka programowania. Są one odpowiedzialne za:\n\n1. **Dodawanie elementów kodu** (add_element) - dodawanie nowych funkcji, klas, metod, importów itp.\n2. **Zastępowanie elementów kodu** (replace_element) - podmiana istniejących elementów na nowe\n3. **Usuwanie elementów kodu** (remove_element) - usuwanie określonych elementów\n4. **Formatowanie kodu** - zapewnienie, że zmodyfikowany kod zachowuje odpowiednie wcięcia i styl\n\n### Struktura manipulatorów\n\nManipulatory w CodeHem są zorganizowane hierarchicznie:\n\n1. **ManipulatorBase** - abstrakcyjna klasa bazowa definiująca podstawowy interfejs\n2. **TemplateManipulator** - implementuje wzorzec projektowy Template Method, zapewniając standardowe implementacje z możliwością dostosowania przez klasy pochodne\n3. **Specjalizowane manipulatory** - konkretne implementacje dla różnych typów elementów kodu i języków programowania:\n   - PythonClassManipulator - do manipulacji klasami w Pythonie\n   - PythonImportManipulator - do manipulacji importami w Pythonie\n   - PythonMethodManipulator - do manipulacji metodami w Pythonie\n   - i inne\n\n### Rejestracja manipulatorów\n\nManipulatory są rejestrowane w centralnym rejestrze (Registry) za pomocą dekoratora `@manipulator`. Każdy manipulator jest identyfikowany przez kombinację:\n- kodu języka (np. 'python')\n- typu elementu kodu (np. CLASS, METHOD, IMPORT)\n\n```python\n@manipulator\nclass PythonClassManipulator(TemplateClassManipulator):\n    \"\"\"Manipulator for Python classes.\"\"\"\n    LANGUAGE_CODE = 'python'\n    ELEMENT_TYPE = CodeElementType.CLASS\n    COMMENT_MARKERS = ['#']\n    DECORATOR_MARKERS = ['@']\n```\n\n### Jak działają manipulatory\n\n1. **Lokalizacja elementu** - manipulator używa usługi ekstrakcji (extraction_service) do znalezienia elementu w kodzie\n2. **Dostosowanie wcięć** - obliczenie odpowiedniego poziomu wcięcia dla nowego kodu\n3. **Formatowanie** - formatowanie nowego kodu zgodnie z konwencjami języka\n4. **Modyfikacja** - wykonanie właściwej operacji (dodanie, zastąpienie, usunięcie)\n5. **Obsługa specjalnych przypadków** - zachowanie komentarzy, dekoratorów, docstringów itp.\n\n### Przykład użycia manipulatora\n\nManipulatory są używane przez `ManipulationService`, który stanowi wysokopoziomowy interfejs do modyfikacji kodu:\n\n```python\ndef upsert_element(self, original_code: str, element_type: str, name: str, new_code: str, parent_name: Optional[str]=None) -> str:\n    \"\"\"\n    Add or replace a code element.\n    \"\"\"\n    manipulator = self.language_service.get_manipulator(element_type)\n    if manipulator:\n        return manipulator.replace_element(original_code, name, new_code, parent_name)\n    return original_code\n```\n\nManipulatory są kluczowym elementem CodeHem, który umożliwia inteligentną modyfikację kodu z zachowaniem jego struktury, formatowania i składni specyficznej dla danego języka programowania.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: codehem/core/manipulators/manipulator_base.py\n...\n\nclass ManipulatorBase(ABC):\n    \"\"\"Base class for all language-specific manipulators.\"\"\"\n    LANGUAGE_CODE: str = ''\n    ELEMENT_TYPE: Optional[CodeElementType] = None\n    COMMENT_MARKERS: List[str] = []\n    DECORATOR_MARKERS: List[str] = []\n\n    def __init__(self, language_code: str=None, element_type: CodeElementType=None, formatter: BaseFormatter=None, extraction_service=None):\n        \"\"\"Initialize the manipulator.\"\"\"\n        self.language_code = language_code or self.LANGUAGE_CODE\n        self.element_type = element_type or self.ELEMENT_TYPE\n        self._extraction_service = extraction_service\n        self.formatter = formatter or BaseFormatter()\n        if not self.language_code:\n            raise ValueError('Manipulator requires a language_code.')\n\n    @property\n    def extraction_service(self):\n        \"\"\"Get extraction service, creating it on demand.\"\"\"\n        if self._extraction_service is None:\n            from codehem.core.extraction_service import ExtractionService\n            try:\n                self._extraction_service = ExtractionService(self.language_code)\n            except ValueError as e:\n                logger.error(f'Failed to create ExtractionService for {self.language_code}: {e}')\n                raise\n        return self._extraction_service\n\n    @abstractmethod\n    def add_element(self, original_code: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Add an element to the code. Must be implemented by subclasses.\"\"\"\n        raise NotImplementedError('Subclasses must implement add_element')\n\n    def find_element(self, code: str, element_name: str, parent_name: Optional[str]=None) -> Tuple[int, int]:\n        \"\"\"Find an element in the code using the Extraction Service.\"\"\"\n        if not self.element_type:\n            logger.warning('find_element called without ELEMENT_TYPE set.')\n            return (0, 0)\n        try:\n            return self.extraction_service.find_element(code, self.element_type.value, element_name, parent_name)\n        except Exception as e:\n            logger.error(f'Error finding element ({self.element_type.value}, {element_name}, {parent_name}): {e}')\n            return (0, 0)\n\n    def format_element(self, element_code: str, indent_level: int=0) -> str:\n        \"\"\"Format a code element using the language-specific formatter.\"\"\"\n        if hasattr(self.formatter, 'format_element') and self.element_type:\n            dedented_code = self.formatter.dedent(element_code)\n            formatted_no_base_indent = self.formatter.format_element(self.element_type.value, dedented_code)\n            base_indent = self.formatter.indent_string * indent_level\n            return self.apply_indentation(formatted_no_base_indent, base_indent)\n        indent = ' ' * (self.formatter.indent_size if hasattr(self.formatter, 'indent_size') else 4) * indent_level\n        return self.apply_indentation(element_code.strip(), indent)\n\n    def replace_element(self, original_code: str, element_name: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Replace an element in the code, handling decorators/comments.\"\"\"\n        logger.debug(f\"Replacing {self.element_type} '{element_name}' (parent: {parent_name})\")\n        start_line, end_line = self.find_element(original_code, element_name, parent_name)\n        if start_line == 0 and end_line == 0:\n            logger.info(f\"{self.element_type} '{element_name}' not found. Attempting to add.\")\n            can_add = parent_name or self.element_type in [CodeElementType.FUNCTION, CodeElementType.CLASS, CodeElementType.IMPORT]\n            if can_add:\n                try:\n                    return self.add_element(original_code, new_element, parent_name)\n                except Exception as e:\n                    logger.error(f\"Error adding missing element '{element_name}': {e}\")\n                    return original_code\n            else:\n                logger.warning(f\"Element '{element_name}' not found and cannot be added without parent context.\")\n                return original_code\n        lines = original_code.splitlines()\n        adjusted_start = self._adjust_start_line(lines, start_line)\n        logger.debug(f'Found element at lines {start_line}-{end_line}. Adjusted start: {adjusted_start}')\n        indent_level = self.get_element_indent_level(original_code, adjusted_start, parent_name)\n        formatted_element = self.format_element(new_element, indent_level)\n        return self.replace_lines(original_code, adjusted_start, end_line, formatted_element)\n\n    def remove_element(self, original_code: str, element_name: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Remove an element from the code, handling decorators/comments.\"\"\"\n        logger.debug(f\"Removing {self.element_type} '{element_name}' (parent: {parent_name})\")\n        start_line, end_line = self.find_element(original_code, element_name, parent_name)\n        if start_line == 0 and end_line == 0:\n            logger.warning(f\"Element '{element_name}' not found. Cannot remove.\")\n            return original_code\n        lines = original_code.splitlines()\n        adjusted_start = self._adjust_start_line(lines, start_line)\n        logger.debug(f'Found element for removal at lines {start_line}-{end_line}. Adjusted: {adjusted_start}')\n        return self.replace_lines(original_code, adjusted_start, end_line, '')\n\n    def get_element_indent_level(self, code: str, element_start_line: int, parent_name: Optional[str]=None) -> int:\n        \"\"\"Calculate indentation level for an element.\"\"\"\n        if element_start_line <= 0:\n            return 0\n        lines = code.splitlines()\n        if element_start_line > len(lines):\n            return 0\n        line_index = element_start_line - 1\n        indent_str = self.get_indentation(lines[line_index])\n        indent_size = self.formatter.indent_size if hasattr(self.formatter, 'indent_size') else 4\n        return len(indent_str) // indent_size if indent_size > 0 else 0\n...\nPath: codehem/languages/lang_python/manipulator/import_handler.py\n\"\"\"\nPython import manipulator implementation.\n\"\"\"\nimport re\nimport logging\nfrom typing import Optional, Tuple, List\nfrom codehem.models.enums import CodeElementType\nfrom codehem.core.registry import manipulator\nfrom codehem.core.manipulators.template_import_manipulator import TemplateImportManipulator\n\nlogger = logging.getLogger(__name__)\n\n@manipulator\nclass PythonImportManipulator(TemplateImportManipulator):\n    \"\"\"Manipulator for Python imports.\"\"\"\n    LANGUAGE_CODE = 'python'\n    ELEMENT_TYPE = CodeElementType.IMPORT\n    COMMENT_MARKERS = ['#']\n    \n    def _perform_insertion(self, code: str, formatted_element: str, insertion_point: int, \n                          parent_name: Optional[str]=None) -> str:\n        \"\"\"Add an import to Python code with proper spacing.\"\"\"\n        lines = code.splitlines() if code else []\n...\nPath: codehem/languages/lang_python/manipulator/class_handler.py\n...\n\n@manipulator\nclass PythonClassManipulator(TemplateClassManipulator):\n    \"\"\"Manipulator for Python classes.\"\"\"\n    LANGUAGE_CODE = 'python'\n    ELEMENT_TYPE = CodeElementType.CLASS\n    COMMENT_MARKERS = ['#']\n    DECORATOR_MARKERS = ['@']\n    \n    def _perform_insertion(self, code: str, formatted_element: str, insertion_point: int, \n                          parent_name: Optional[str]=None) -> str:\n        \"\"\"Add a class to Python code with appropriate spacing.\"\"\"\n        if not code:\n            return formatted_element + '\\n'\n            \n        result = super()._perform_insertion(code, formatted_element, insertion_point, parent_name)\n        \n        # Ensure proper spacing and newline at end\n        if not result.endswith('\\n'):\n            result += '\\n'\n            \n        return result...\nPath: codehem/languages/lang_python/manipulator/method_handler.py\n\"\"\"\nPython method manipulator implementation.\n\"\"\"\nimport logging\nfrom typing import Optional\nfrom codehem.models.enums import CodeElementType\nfrom codehem.core.registry import manipulator\nfrom codehem.core.manipulators.template_method_manipulator import TemplateMethodManipulator\n\nlogger = logging.getLogger(__name__)\n\n# @manipulator # Disabled: Using PythonASTManipulator via __init__.py registration\nclass PythonMethodManipulator(TemplateMethodManipulator):\n    \"\"\"Manipulator for Python methods.\"\"\"\n    LANGUAGE_CODE = 'python'\n    ELEMENT_TYPE = CodeElementType.METHOD\n    COMMENT_MARKERS = ['#']\n    DECORATOR_MARKERS = ['@']\n...\nPath: codehem/languages/lang_python/manipulator/base.py\n...\n\n    def __init__(self, element_type: CodeElementType = None, formatter: BaseFormatter = None, \n                 extraction_service = None):\n        \"\"\"Initialize Python manipulator with appropriate formatter.\"\"\"\n        if formatter is None:\n            try:\n                lang_service = registry.get_language_service('python')\n                if lang_service and hasattr(lang_service, 'formatter'):\n                     formatter = lang_service.formatter\n                else:\n\n                     formatter = PythonFormatter()\n            except Exception as e:\n                logger.warning(f\"Could not get PythonFormatter: {e}\")\n\n        super().__init__(\n            language_code=\"python\",\n            element_type=element_type,\n            formatter=formatter,\n            extraction_service=extraction_service,\n        )\n...\nPath: codehem/core/manipulators/template_manipulator.py\n\"\"\"\nTemplate pattern for manipulators to standardize language-specific implementations.\n\"\"\"\nimport logging\nfrom typing import Optional\nfrom codehem.core.manipulators.manipulator_base import ManipulatorBase\n\nlogger = logging.getLogger(__name__)\n\nclass TemplateManipulator(ManipulatorBase):\n    \"\"\"\n    Template method pattern for manipulators.\n    Provides standardized implementations with hooks for language-specific customization.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def replace_element(self, original_code: str, name: str, new_code: str, parent_name: Optional[str] = None) -> str:\n        \"\"\"\n        Replace an existing element (function, method, class, import) by name.\n        If not found, insert the new element.\n\n        Args:\n            original_code: Original source code\n            name: Name of the element to replace\n            new_code: New content for the element\n            parent_name: Optional parent element name (e.g., class name for methods)\n...\n                        end_idx = len(code_lines)\n\n        if start_idx is not None and end_idx is not None:\n            before = code_lines[:start_idx]\n            after = code_lines[end_idx:]\n            new_code_lines = new_code.strip('\\n').splitlines()\n            # Adjust indentation to match existing element\n            indent = ''\n            if before and before[-1].startswith(' '):\n                indent = re.match(r'^(\\s*)', before[-1]).group(1)\n            elif start_idx < len(code_lines):\n                indent = re.match(r'^(\\s*)', code_lines[start_idx]).group(1)\n            new_code_lines = [indent + line if line.strip() else line for line in new_code_lines]\n            result_lines = before + new_code_lines + after\n            return '\\n'.join(result_lines)\n        else:\n            # Element not found, fallback to add\n            return self.add_element(original_code, new_code, parent_name)\n\n    def __init__(self, insert_blank_line_before_element: bool = True, insert_blank_line_after_element: bool = False, handle_docstrings_special: bool = False):\n        self.insert_blank_line_before_element = insert_blank_line_before_element\n        self.insert_blank_line_after_element = insert_blank_line_after_element\n        self.handle_docstrings_special = handle_docstrings_special\n\n    def add_element(self, original_code: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        import re\n\n        lines = original_code.splitlines()\n        indent_level = 0\n        insertion_idx = len(lines)\n...\nPath: codehem/core/manipulation_service.py\n...\n\n    def upsert_element(self, original_code: str, element_type: str, name: str, new_code: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"\n        Add or replace a code element.\n\n        Args:\n        original_code: Original source code\n        element_type: Type of element to add/replace (from CodeElementType)\n        name: Name of the element\n        new_code: New content for the element\n        parent_name: Name of parent element (e.g., class name for methods)\n\n        Returns:\n        Modified code\n        \"\"\"\n        logger.debug(f\"Upserting element of type '{element_type}', name '{name}', parent '{parent_name}'\")\n        manipulator = self.language_service.get_manipulator(element_type)\n...\n\n    def upsert_element_by_xpath(self, original_code: str, xpath: str, new_code: str) -> str:\n        \"\"\"\n        Add or replace an element in the code using XPath expression.\n        \n        Args:\n            original_code: Original source code\n            xpath: XPath expression (e.g., 'ClassName.method_name', 'ClassName[interface].method_name[property_getter]')\n            new_code: New content for the element\n            \n        Returns:\n            Modified code\n        \"\"\"\n        (element_name, parent_name, element_type) = XPathParser.get_element_info(xpath)\n        if not element_type:\n            element_type = self.language_service.detect_element_type(new_code)\n        return self.upsert_element(original_code, element_type, element_name, new_code, parent_name)\n...\n            \n        Returns:\n            Modified code\n        \"\"\"\n        logger.debug(f\"Adding element of type '{element_type}', parent '{parent_name}'\")\n        manipulator = self.language_service.get_manipulator(element_type)\n        if manipulator:\n            if hasattr(manipulator, 'add_element'):\n                return manipulator.add_element(original_code, new_code, parent_name)\n            logger.warning(f\"Manipulator for {element_type} does not implement add_element method\")\n        else:\n            logger.warning(f\"No manipulator found for element type: {element_type}\")\n        return original_code\n...\n            \n        Returns:\n            Modified code\n        \"\"\"\n        logger.debug(f\"Removing element of type '{element_type}', name '{element_name}', parent '{parent_name}'\")\n        manipulator = self.language_service.get_manipulator(element_type)\n        if manipulator:\n            if hasattr(manipulator, 'remove_element'):\n                return manipulator.remove_element(original_code, element_name, parent_name)\n            logger.warning(f\"Manipulator for {element_type} does not implement remove_element method\")\n        else:\n            logger.warning(f\"No manipulator found for element type: {element_type}\")\n        return original_code\n...\nPath: codehem/core/registry.py\n...\n\nclass Registry:\n    \"\"\"Central registry for CodeHem components.\"\"\"\n    _instance = None\n\n    def __init__(self):\n        self._initialized = False\n        self._initialize()\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Registry, cls).__new__(cls)\n        return cls._instance\n\n    def _initialize(self):\n        \"\"\"Initializes empty registries.\"\"\"\n        if hasattr(self, '_initialized') and self._initialized:\n            return\n        self.language_detectors = {}\n        self.language_services = {}\n        self.all_descriptors = {}\n        self.all_extractors = {}\n        self.all_manipulators = {}\n        self.discovered_modules = set()\n        self.language_service_instances = {}\n        self._initialized = False\n        logger.debug('Registry _initialize completed.')\n...\n\n    def register_extractor(self, cls: Type[BaseExtractor]):\n        \"\"\"Registers an extractor class.\"\"\"\n        try:\n            language_code = cls.LANGUAGE_CODE.lower()\n            element_type = cls.ELEMENT_TYPE.value.lower()\n            extractor_key = f'{language_code}/{element_type}'\n            if extractor_key in self.all_extractors:\n                logger.warning(f\"Extractor for '{extractor_key}' is already registered ({self.all_extractors[extractor_key].__name__}). Overwriting with {cls.__name__}.\")\n            self.all_extractors[extractor_key] = cls\n            rich.print(f'Registered extractor: {cls.__name__} for {extractor_key}')\n        except Exception as e:\n            logger.error(f'Error during registration of extractor {cls.__name__}: {e}', exc_info=True)\n        return cls\n\n    def register_manipulator(self, cls):\n        \"\"\"Registers a manipulator class.\"\"\"\n        try:\n            language_code = cls.LANGUAGE_CODE.lower()\n            element_type = cls.ELEMENT_TYPE.value.lower()\n            key = f'{language_code}_{element_type}'\n            if key in self.all_manipulators:\n                logger.warning(f\"Manipulator for '{key}' is already registered ({self.all_manipulators[key].__name__}). Overwriting with {cls.__name__}.\")\n            self.all_manipulators[key] = cls\n            rich.print(f'Registered manipulator: {cls.__name__} for {language_code}/{element_type}')\n        except Exception as e:\n            logger.error(f'Error during registration of manipulator {cls.__name__}: {e}', exc_info=True)\n        return cls\n...\n\n# Global registry instance\nregistry = Registry()\n\n# Decorators for registration\ndef language_detector(cls):\n    \"\"\"Decorator for registering a language detector.\"\"\"\n    return registry.register_language_detector(cls)\n\ndef language_service(cls):\n    \"\"\"Decorator for registering a language service.\"\"\"\n    return registry.register_language_service(cls)\n\ndef extractor(cls):\n    \"\"\"Decorator for registering an extractor.\"\"\"\n    return registry.register_extractor(cls)\n\ndef manipulator(cls):\n    \"\"\"Decorator for registering a manipulator.\"\"\"\n    return registry.register_manipulator(cls)\n\ndef element_type_descriptor(cls):\n    \"\"\"Decorator for registering an element type descriptor.\"\"\"\n    return registry.register_element_type_descriptor(cls)...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_016DNH7HcCqdaxCHGedsyRFZ"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/code/CodeHem","folderRoot":"D:/code/CodeHem"}],"workspaceFoldersUnchanged":false}}],"response_text":"## Manipulatory w CodeHem\n\nManipulatory (manipulators) w CodeHem to kluczowe komponenty odpowiedzialne za modyfikację kodu źródłowego. Oto szczegółowe wyjaśnienie:\n\n### Czym są manipulatory\n\nManipulatory to klasy, które implementują logikę do modyfikowania kodu źródłowego w sposób świadomy składni danego języka programowania. Są one odpowiedzialne za:\n\n1. **Dodawanie elementów kodu** (add_element) - dodawanie nowych funkcji, klas, metod, importów itp.\n2. **Zastępowanie elementów kodu** (replace_element) - podmiana istniejących elementów na nowe\n3. **Usuwanie elementów kodu** (remove_element) - usuwanie określonych elementów\n4. **Formatowanie kodu** - zapewnienie, że zmodyfikowany kod zachowuje odpowiednie wcięcia i styl\n\n### Struktura manipulatorów\n\nManipulatory w CodeHem są zorganizowane hierarchicznie:\n\n1. **ManipulatorBase** - abstrakcyjna klasa bazowa definiująca podstawowy interfejs\n2. **TemplateManipulator** - implementuje wzorzec projektowy Template Method, zapewniając standardowe implementacje z możliwością dostosowania przez klasy pochodne\n3. **Specjalizowane manipulatory** - konkretne implementacje dla różnych typów elementów kodu i języków programowania:\n   - PythonClassManipulator - do manipulacji klasami w Pythonie\n   - PythonImportManipulator - do manipulacji importami w Pythonie\n   - PythonMethodManipulator - do manipulacji metodami w Pythonie\n   - i inne\n\n### Rejestracja manipulatorów\n\nManipulatory są rejestrowane w centralnym rejestrze (Registry) za pomocą dekoratora `@manipulator`. Każdy manipulator jest identyfikowany przez kombinację:\n- kodu języka (np. 'python')\n- typu elementu kodu (np. CLASS, METHOD, IMPORT)\n\n```python\n@manipulator\nclass PythonClassManipulator(TemplateClassManipulator):\n    \"\"\"Manipulator for Python classes.\"\"\"\n    LANGUAGE_CODE = 'python'\n    ELEMENT_TYPE = CodeElementType.CLASS\n    COMMENT_MARKERS = ['#']\n    DECORATOR_MARKERS = ['@']\n```\n\n### Jak działają manipulatory\n\n1. **Lokalizacja elementu** - manipulator używa usługi ekstrakcji (extraction_service) do znalezienia elementu w kodzie\n2. **Dostosowanie wcięć** - obliczenie odpowiedniego poziomu wcięcia dla nowego kodu\n3. **Formatowanie** - formatowanie nowego kodu zgodnie z konwencjami języka\n4. **Modyfikacja** - wykonanie właściwej operacji (dodanie, zastąpienie, usunięcie)\n5. **Obsługa specjalnych przypadków** - zachowanie komentarzy, dekoratorów, docstringów itp.\n\n### Przykład użycia manipulatora\n\nManipulatory są używane przez `ManipulationService`, który stanowi wysokopoziomowy interfejs do modyfikacji kodu:\n\n```python\ndef upsert_element(self, original_code: str, element_type: str, name: str, new_code: str, parent_name: Optional[str]=None) -> str:\n    \"\"\"\n    Add or replace a code element.\n    \"\"\"\n    manipulator = self.language_service.get_manipulator(element_type)\n    if manipulator:\n        return manipulator.replace_element(original_code, name, new_code, parent_name)\n    return original_code\n```\n\nManipulatory są kluczowym elementem CodeHem, który umożliwia inteligentną modyfikację kodu z zachowaniem jego struktury, formatowania i składni specyficznej dla danego języka programowania.\n","workspace_file_chunks":[]},{"request_id":"cf277ba5-3cfa-4547-9506-83beacf6efbc","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"4f7bad50-e6e3-41ff-a6a3-de1a12cc55f7","request_message":"mam wrażenie że zrobił się lekki bałagan. czym jest python ast manipulator?","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"mam wrażenie że zrobił się lekki bałagan. czym jest python ast manipulator?"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01Sy4eDQkJEFL25b6dSYYZtc","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find detailed information about python_ast_manipulator.py. Look for the file codehem/languages/lang_python/python_ast_manipulator.py and any related files or imports that reference it. Focus on understanding its purpose, how it works, and how it relates to other manipulators in the system.\"}"}},{"id":0,"type":0,"content":"Przepraszam za zamieszanie. Przyjrzyjmy się dokładniej, czym jest Python AST Manipulator w kontekście CodeHem.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"mam wrażenie że zrobił się lekki bałagan. czym jest python ast manipulator?"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/code/CodeHem","folderRoot":"D:/code/CodeHem"}],"workspaceFoldersUnchanged":false}}],"response_text":"Przepraszam za zamieszanie. Przyjrzyjmy się dokładniej, czym jest Python AST Manipulator w kontekście CodeHem.\n","workspace_file_chunks":[]},{"status":"success","request_id":"07e6c1ad-4747-4c74-8cb1-cd69819ab6ac","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01E8MjjcYoRPWGpHMQZSUF1m","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"codehem/languages/lang_python/python_ast_manipulator.py\"}"}},{"id":0,"type":0,"content":""},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: codehem/languages/lang_python/python_ast_manipulator.py\nimport ast\nimport logging\nfrom typing import Optional, List, Tuple, Union, Any\nfrom codehem.core.manipulators.manipulator_base import ManipulatorBase\nfrom codehem.models.enums import CodeElementType\n\nlogger = logging.getLogger(__name__)\n\nclass ReplaceOrInsertTransformer(ast.NodeTransformer):\n    \"\"\"\n    AST Transformer to replace a node at a specific location or insert nodes\n    into a parent node's body. (Version 3: Improved replacement, import block handling)\n    \"\"\"\n    def __init__(self,\n                 target_start_line: Optional[int],\n                 target_end_line: Optional[int],\n                 new_nodes: List[ast.AST],\n                 parent_name: Optional[str],\n                 element_type: CodeElementType,\n                 target_name: str):\n        super().__init__()\n        self.target_start_line = target_start_line\n        self.target_end_line = target_end_line\n        self.new_nodes = new_nodes\n        self.parent_name = parent_name\n        self.element_type = element_type\n        self.target_name = target_name # Name of the element to replace/insert ('all' for import block)\n        self.is_replacing = target_start_line is not None\n...\n\n            logger.debug(f\"Calculated insertion point for {self.element_type.value} at module level: {insert_pos}\")\n\n        return insert_pos\n\n    def visit(self, node):\n        \"\"\"Visit nodes, handling replacement, then visiting children, then insertion.\"\"\"\n        # 1. Handle Replacement (if applicable to the node itself)\n        if self.is_replacing and not self.operation_done and self._is_target_node(node):\n            logger.info(f\"Replacing node {type(node).__name__} (target: {self.target_name}) at line {node.lineno} with {len(self.new_nodes)} new node(s).\")\n            self.operation_done = True\n            return self.new_nodes if self.new_nodes else None # Return list/None for visit_list\n\n        # 2. Visit Children (generic_visit handles recursion)\n        new_node = super().generic_visit(node)\n\n        # 3. Handle Insertion (if applicable within this node's body)\n        # Check node type *after* visiting children, as generic_visit returns the node\n        if new_node is None: # Node might have been deleted by a child visitor? Unlikely here but safe check.\n             return None\n\n        # Check if insertion is intended and hasn't happened yet\n        if not self.is_replacing and not self.operation_done:\n            is_module_target = (self.parent_name is None and isinstance(new_node, ast.Module))\n            is_class_target = (self.parent_name is not None and isinstance(new_node, ast.ClassDef) and new_node.name == self.parent_name)\n...\n\n        # Default processing if not import block replacement\n        node.body = self.visit_list(node.body)\n        # Allow generic_visit to handle potential insertion into the module body\n        return super().generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> Any:\n        node.body = self.visit_list(node.body)\n        # Allow generic_visit to handle potential insertion or replacement of the class itself\n        return super().generic_visit(node)\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> Any:\n        node.body = self.visit_list(node.body)\n        # Allow generic_visit for replacement check of the function itself\n        return super().generic_visit(node)\n\n    def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -> Any:\n        node.body = self.visit_list(node.body)\n         # Allow generic_visit for replacement check of the function itself\n        return super().generic_visit(node)\n\nclass PythonASTManipulator(ManipulatorBase):\n    \"\"\"\n    AST-based manipulator for Python code using ast.NodeTransformer.\n    Supports robust insertion, replacement of classes, functions, methods,\n    properties, and imports. (Version 3)\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n...\n\n    def upsert_element(self, original_code: str, element_type_str: str, name: str, new_code: str, parent_name: Optional[str] = None) -> str:\n        \"\"\" Add or replace a code element using AST transformation. \"\"\"\n        logger.info(f\"AST Upsert: type='{element_type_str}', name='{name}', parent='{parent_name}'\")\n\n        try: element_type = self._get_element_type_for_upsert(element_type_str, new_code)\n        except ValueError as e: logger.error(f\"Cannot perform upsert: {e}\"); return original_code\n\n        # Refine type guess based on context\n        if element_type == CodeElementType.FUNCTION and parent_name: element_type = CodeElementType.METHOD\n        logger.info(f\"Processing as element type: {element_type.value}\")\n...\n            except Exception as e: logger.error(f\"Error parsing new code snippet: {e}\"); return original_code\n        else: logger.debug(\"Proceeding with deletion (new_nodes is empty).\")\n\n        # Apply transformation\n        modified_tree = None\n        transformer = None\n        try:\n            transformer = ReplaceOrInsertTransformer(\n                target_start_line=target_start_line, target_end_line=target_end_line,\n                new_nodes=new_nodes, parent_name=parent_name,\n                element_type=element_type, target_name=name if name != 'all' else None # Pass None name for block replace\n            )\n            modified_tree = transformer.visit(original_tree)\n            if modified_tree is None: logger.info(\"Transformation resulted in empty AST.\"); return \"\\n\"\n            modified_tree = ast.fix_missing_locations(modified_tree)\n\n            if not transformer.operation_done:\n                 action = \"replace/delete\" if is_replacing else \"insert\"\n                 logger.error(f\"Transformer failed to {action} element '{name}' \"\n                              f\"{f'at lines {target_start_line}-{target_end_line}' if is_replacing else f'into parent {parent_name}'}.\")\n                 return original_code # Return original if operation failed\n\n            logger.info(f\"Transformer operation successful: {'Replaced/Deleted' if is_replacing else 'Inserted'}\")\n        except Exception as e:\n            logger.error(f\"Error during AST transformation: {e}\", exc_info=True)\n            return original_code\n...\n\n    def add_element(self, original_code: str, new_code: str, parent_name: Optional[str]=None) -> str:\n        logger.debug(f\"Calling add_element for parent '{parent_name}'\")\n        try:\n            new_tree = ast.parse(new_code.strip())\n            if not new_tree.body: logger.error(\"Cannot add empty element.\"); return original_code\n            node_to_add = new_tree.body[0]\n            temp_name = getattr(node_to_add, 'name', None)\n            # Let upsert handle type deduction by passing \"unknown\"\n            temp_type_str = \"unknown\"\n            if isinstance(node_to_add, (ast.Import, ast.ImportFrom)): temp_name = 'all'\n\n            if temp_name and temp_type_str:\n                return self.upsert_element(original_code, temp_type_str, temp_name, new_code, parent_name)\n            else: logger.error(f\"Could not deduce name/type for add_element: {new_code[:100]}...\")\n        except Exception as e: logger.error(f\"Error preparing for add_element: {e}\")\n        return original_code\n\n    def replace_element(self, original_code: str, name: str, new_code: str, parent_name: Optional[str]=None) -> str:\n        logger.debug(f\"Calling replace_element for '{name}', parent '{parent_name}' - delegating type detection to upsert.\")\n        # Pass \"unknown\" - upsert will try to find existing or deduce from new_code\n        return self.upsert_element(original_code, \"unknown\", name, new_code, parent_name)\n\n    def remove_element(self, original_code: str, name: str, parent_name: Optional[str]=None) -> str:\n        logger.debug(f\"Calling remove_element for '{name}', parent '{parent_name}' - delegating type detection to upsert.\")\n        # Pass \"unknown\" - upsert will try to find the element first to determine type\n        return self.upsert_element(original_code, \"unknown\", name, \"\", parent_name)\n\n    def upsert_element_by_xpath(self, original_code: str, xpath: str, new_code: str) -> str:\n        from codehem.core.engine.xpath_parser import XPathParser\n        logger.debug(f\"Calling upsert_element_by_xpath for '{xpath}'\")\n        try:\n            element_name, parent_name, element_type_str_from_xpath = XPathParser.get_element_info(xpath)\n            op_element_type_str = element_type_str_from_xpath if element_type_str_from_xpath else \"unknown\"\n            op_name = element_name\n            if not op_name and op_element_type_str == CodeElementType.IMPORT.value: op_name = 'all'\n            elif not op_name:\n                 # Try deducing name from new_code if XPath was like '[class]'\n                 try:\n                      new_tree = ast.parse(new_code.strip())\n                      if new_tree.body and hasattr(new_tree.body[0], 'name'): op_name = new_tree.body[0].name\n...\nPath: codehem/languages/lang_python/__init__.py\n\"\"\"\nPython language module for CodeHem.\n\"\"\"\n\nNODE_CONFIG = {\n    'function': {\n        'name_field': 'name',\n        'parameters_field': 'parameters',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'method': {\n        'name_field': 'name',\n        'parameters_field': 'parameters',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'class': {\n        'name_field': 'name',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': None,\n    },\n    'decorator': {\n        'name_field': 'name',\n    },\n    'property_getter': {\n        'name_field': 'name',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'property_setter': {\n        'name_field': 'name',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'static_method': {\n        'name_field': 'name',\n        'parameters_field': 'parameters',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'import': {\n        'name_field': 'name',  # or 'module' depending on AST\n    },\n}\nfrom codehem.core.registry import registry\nfrom .service import PythonLanguageService\nfrom .manipulator.method_handler import PythonMethodManipulator\nfrom .python_ast_manipulator import PythonASTManipulator\nfrom codehem.models.enums import CodeElementType\nimport logging\n\ndef initialize_python_language():\n    \"\"\"\n    Initialize and register Python language manipulators and services.\n    This function clears existing 'python_' manipulators and registers patched versions.\n    Call this explicitly before using Python language features or running tests.\n    \"\"\"\n    # Clear all existing python manipulators\n    keys_to_remove = [k for k in list(registry.all_manipulators.keys()) if k.startswith('python_')]\n    for k in keys_to_remove:\n        registry.all_manipulators.pop(k, None)\n    logging.debug(f\"Cleared {len(keys_to_remove)} existing python manipulators.\")\n\n    # Register AST manipulators for function, class, import\n    for element_type_enum in [\n        CodeElementType.FUNCTION,\n        CodeElementType.CLASS,\n        CodeElementType.IMPORT,\n    ]:\n        element_type_name = element_type_enum.value.lower()\n        Wrapper = type(\n            f\"Python{element_type_name.capitalize()}ASTManipulator\",\n            (PythonASTManipulator,),\n            {\n                'LANGUAGE_CODE': 'python',\n                'ELEMENT_TYPE': element_type_enum\n            }\n        )\n        registry.register_manipulator(Wrapper)\n        logging.debug(f\"Registered ASTManipulator: Python{element_type_name.capitalize()}ASTManipulator for element_type: {element_type_enum}\")\n\n    # Register PythonASTManipulator for other element types\n    for element_type_enum in [\n        CodeElementType.METHOD,\n        CodeElementType.PROPERTY_GETTER,\n        CodeElementType.PROPERTY_SETTER,\n        CodeElementType.STATIC_PROPERTY,\n    ]:\n        element_type_name = element_type_enum.value.lower()\n        Wrapper = type(\n            f\"Python{element_type_name.capitalize()}ASTManipulator\",\n            (PythonASTManipulator,),\n            {\n                'LANGUAGE_CODE': 'python',\n                'ELEMENT_TYPE': element_type_enum\n            }\n        )\n        registry.register_manipulator(Wrapper)\n        logging.debug(f\"Registered ASTManipulator: Python{element_type_name.capitalize()}ASTManipulator for element_type: {element_type_enum}\")\n\n    # Register the Python language service (if needed elsewhere)\n    # This import ensures the service is available\n    logging.debug(\"Python language initialization complete.\")\n...\nPath: codehem/core/manipulators/manipulator_base.py\n...\n\nclass ManipulatorBase(ABC):\n    \"\"\"Base class for all language-specific manipulators.\"\"\"\n    LANGUAGE_CODE: str = ''\n    ELEMENT_TYPE: Optional[CodeElementType] = None\n    COMMENT_MARKERS: List[str] = []\n    DECORATOR_MARKERS: List[str] = []\n\n    def __init__(self, language_code: str=None, element_type: CodeElementType=None, formatter: BaseFormatter=None, extraction_service=None):\n        \"\"\"Initialize the manipulator.\"\"\"\n        self.language_code = language_code or self.LANGUAGE_CODE\n        self.element_type = element_type or self.ELEMENT_TYPE\n        self._extraction_service = extraction_service\n        self.formatter = formatter or BaseFormatter()\n        if not self.language_code:\n            raise ValueError('Manipulator requires a language_code.')\n\n    @property\n    def extraction_service(self):\n        \"\"\"Get extraction service, creating it on demand.\"\"\"\n        if self._extraction_service is None:\n            from codehem.core.extraction_service import ExtractionService\n            try:\n                self._extraction_service = ExtractionService(self.language_code)\n            except ValueError as e:\n                logger.error(f'Failed to create ExtractionService for {self.language_code}: {e}')\n                raise\n        return self._extraction_service\n\n    @abstractmethod\n    def add_element(self, original_code: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Add an element to the code. Must be implemented by subclasses.\"\"\"\n        raise NotImplementedError('Subclasses must implement add_element')\n...\n\n    def format_element(self, element_code: str, indent_level: int=0) -> str:\n        \"\"\"Format a code element using the language-specific formatter.\"\"\"\n        if hasattr(self.formatter, 'format_element') and self.element_type:\n            dedented_code = self.formatter.dedent(element_code)\n            formatted_no_base_indent = self.formatter.format_element(self.element_type.value, dedented_code)\n            base_indent = self.formatter.indent_string * indent_level\n            return self.apply_indentation(formatted_no_base_indent, base_indent)\n        indent = ' ' * (self.formatter.indent_size if hasattr(self.formatter, 'indent_size') else 4) * indent_level\n        return self.apply_indentation(element_code.strip(), indent)\n\n    def replace_element(self, original_code: str, element_name: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Replace an element in the code, handling decorators/comments.\"\"\"\n        logger.debug(f\"Replacing {self.element_type} '{element_name}' (parent: {parent_name})\")\n        start_line, end_line = self.find_element(original_code, element_name, parent_name)\n        if start_line == 0 and end_line == 0:\n            logger.info(f\"{self.element_type} '{element_name}' not found. Attempting to add.\")\n            can_add = parent_name or self.element_type in [CodeElementType.FUNCTION, CodeElementType.CLASS, CodeElementType.IMPORT]\n            if can_add:\n                try:\n                    return self.add_element(original_code, new_element, parent_name)\n                except Exception as e:\n...\n\n    def remove_element(self, original_code: str, element_name: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Remove an element from the code, handling decorators/comments.\"\"\"\n        logger.debug(f\"Removing {self.element_type} '{element_name}' (parent: {parent_name})\")\n        start_line, end_line = self.find_element(original_code, element_name, parent_name)\n        if start_line == 0 and end_line == 0:\n            logger.warning(f\"Element '{element_name}' not found. Cannot remove.\")\n            return original_code\n        lines = original_code.splitlines()\n        adjusted_start = self._adjust_start_line(lines, start_line)\n        logger.debug(f'Found element for removal at lines {start_line}-{end_line}. Adjusted: {adjusted_start}')\n        return self.replace_lines(original_code, adjusted_start, end_line, '')\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01Sy4eDQkJEFL25b6dSYYZtc"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/code/CodeHem","folderRoot":"D:/code/CodeHem"}],"workspaceFoldersUnchanged":false}}],"response_text":"","workspace_file_chunks":[]},{"status":"success","request_id":"6801f83f-f83b-42e8-8734-9eb98956ed08","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"## Python AST Manipulator - Wyjaśnienie\n\nPython AST Manipulator to zaawansowany komponent w CodeHem, który służy do manipulacji kodem Python przy użyciu Abstract Syntax Tree (AST). Oto szczegółowe wyjaśnienie:\n\n### Czym jest Python AST Manipulator\n\nPython AST Manipulator to specjalistyczny manipulator, który wykorzystuje moduł `ast` z biblioteki standardowej Pythona do analizy i modyfikacji kodu źródłowego na poziomie drzewa składniowego. W przeciwieństwie do prostszych manipulatorów opartych na tekście, AST Manipulator:\n\n1. **Parsuje kod do drzewa AST** - konwertuje kod źródłowy na strukturę drzewa, która reprezentuje jego składnię\n2. **Modyfikuje drzewo AST** - dodaje, usuwa lub zmienia węzły w drzewie\n3. **Konwertuje zmodyfikowane drzewo z powrotem na kod** - używając funkcji `ast.unparse()`\n\n### Główne komponenty\n\n1. **ReplaceOrInsertTransformer** (linie 9-285):\n   - Klasa dziedzicząca po `ast.NodeTransformer`\n   - Odpowiada za przechodzenie przez drzewo AST i wykonywanie operacji zastępowania lub wstawiania węzłów\n   - Zawiera logikę do identyfikacji węzłów docelowych i określania punktów wstawiania\n\n2. **PythonASTManipulator** (linie 287-488):\n   - Implementacja `ManipulatorBase` używająca AST\n   - Zapewnia metody wysokiego poziomu do manipulacji kodem:\n     - `upsert_element` - dodaje lub zastępuje element kodu\n     - `add_element` - dodaje nowy element\n     - `replace_element` - zastępuje istniejący element\n     - `remove_element` - usuwa element\n     - `upsert_element_by_xpath` - dodaje lub zastępuje element używając wyrażenia XPath\n\n### Jak działa\n\n1. **Analiza kodu źródłowego**:\n   ```python\n   original_tree = ast.fix_missing_locations(ast.parse(original_code))\n   ```\n\n2. **Identyfikacja elementu do modyfikacji**:\n   - Znajduje element w kodzie używając usługi ekstrakcji\n   - Określa jego pozycję (numery linii)\n   - Identyfikuje typ elementu (funkcja, klasa, metoda, import)\n\n3. **Transformacja AST**:\n   ```python\n   transformer = ReplaceOrInsertTransformer(...)\n   modified_tree = transformer.visit(original_tree)\n   ```\n\n4. **Konwersja z powrotem na kod**:\n   ```python\n   new_source = ast.unparse(modified_tree)\n   ```\n\n### Zalety podejścia AST\n\n1. **Świadomość składni** - manipulacje są wykonywane z pełnym zrozumieniem struktury kodu\n2. **Odporność na błędy** - mniejsze ryzyko uszkodzenia kodu\n3. **Obsługa złożonych przypadków** - np. bloki importów, dekoratory, właściwości\n4. **Zachowanie formatowania** - lepsze zachowanie struktury kodu\n\n### Integracja z systemem\n\nW pliku `codehem/languages/lang_python/__init__.py` widać, że Python AST Manipulator jest rejestrowany dla różnych typów elementów kodu:\n\n```python\n# Register AST manipulators for function, class, import\nfor element_type_enum in [\n    CodeElementType.FUNCTION,\n    CodeElementType.CLASS,\n    CodeElementType.IMPORT,\n]:\n    # ...\n    registry.register_manipulator(Wrapper)\n```\n\nPython AST Manipulator stanowi więc zaawansowaną alternatywę dla prostszych manipulatorów opartych na tekście, zapewniając bardziej niezawodne i precyzyjne modyfikacje kodu Python.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on codehem/languages/lang_python/python_ast_manipulator.py:\n     1\timport ast\n     2\timport logging\n     3\tfrom typing import Optional, List, Tuple, Union, Any\n     4\tfrom codehem.core.manipulators.manipulator_base import ManipulatorBase\n     5\tfrom codehem.models.enums import CodeElementType\n     6\t\n     7\tlogger = logging.getLogger(__name__)\n     8\t\n     9\tclass ReplaceOrInsertTransformer(ast.NodeTransformer):\n    10\t    \"\"\"\n    11\t    AST Transformer to replace a node at a specific location or insert nodes\n    12\t    into a parent node's body. (Version 3: Improved replacement, import block handling)\n    13\t    \"\"\"\n    14\t    def __init__(self,\n    15\t                 target_start_line: Optional[int],\n    16\t                 target_end_line: Optional[int],\n    17\t                 new_nodes: List[ast.AST],\n    18\t                 parent_name: Optional[str],\n    19\t                 element_type: CodeElementType,\n    20\t                 target_name: str):\n    21\t        super().__init__()\n    22\t        self.target_start_line = target_start_line\n    23\t        self.target_end_line = target_end_line\n    24\t        self.new_nodes = new_nodes\n    25\t        self.parent_name = parent_name\n    26\t        self.element_type = element_type\n    27\t        self.target_name = target_name # Name of the element to replace/insert ('all' for import block)\n    28\t        self.is_replacing = target_start_line is not None\n    29\t        self.is_import_block_replace = (self.is_replacing and\n    30\t                                        self.element_type == CodeElementType.IMPORT and\n    31\t                                        self.target_name == 'all') # Specific flag for import block\n    32\t        self.operation_done = False # Track if replacement or insertion was performed\n    33\t\n    34\t    def _check_property_decorator(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef], decorator_type: str) -> bool:\n    35\t        \"\"\"Checks for specific property decorators (@property, @name.setter).\"\"\"\n    36\t        if not hasattr(node, 'decorator_list'):\n    37\t            return False\n    38\t        for d in node.decorator_list:\n    39\t            if decorator_type == 'getter':\n    40\t                if isinstance(d, ast.Name) and d.id == 'property':\n    41\t                    return True\n    42\t            elif decorator_type == 'setter':\n    43\t                 # Match @<target_name>.setter - ensure target_name is valid for this check\n    44\t                if self.target_name and isinstance(d, ast.Attribute) and d.attr == 'setter':\n    45\t                    if isinstance(d.value, ast.Name) and d.value.id == self.target_name:\n    46\t                         return True\n    47\t        return False\n    48\t\n    49\t    def _is_target_node(self, node: ast.AST) -> bool:\n    50\t        \"\"\"Check if the node matches the target for replacement (excluding import blocks).\"\"\"\n    51\t        # This method should NOT be used for import block replacement logic.\n    52\t        if not self.is_replacing or self.is_import_block_replace:\n    53\t            return False\n    54\t        if not hasattr(node, 'lineno'): return False\n    55\t\n    56\t        # --- Primary Check: Start Line ---\n    57\t        # Allow slight diff if decorators might affect the FunctionDef/ClassDef lineno\n    58\t        line_match = False\n    59\t        if node.lineno == self.target_start_line:\n    60\t            line_match = True\n    61\t        elif hasattr(node, 'decorator_list') and node.decorator_list:\n    62\t             # Check if node starts shortly after target if decorators are present\n    63\t             if node.lineno > self.target_start_line and (node.lineno - self.target_start_line) <= len(node.decorator_list):\n    64\t                   line_match = True\n    65\t                   logger.debug(f\"Accepting node {getattr(node, 'name', type(node).__name__)} at line {node.lineno} for target line {self.target_start_line} due to decorators.\")\n    66\t\n    67\t        if not line_match: return False\n    68\t\n    69\t        # --- Secondary Check: Type and Name ---\n    70\t        node_name = getattr(node, 'name', None)\n    71\t\n    72\t        if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):\n    73\t            if node_name != self.target_name: return False\n    74\t            if self.element_type == CodeElementType.PROPERTY_GETTER:\n    75\t                return self._check_property_decorator(node, 'getter')\n    76\t            elif self.element_type == CodeElementType.PROPERTY_SETTER:\n    77\t                return self._check_property_decorator(node, 'setter')\n    78\t            elif self.element_type in (CodeElementType.FUNCTION, CodeElementType.METHOD):\n    79\t                 is_prop = self._check_property_decorator(node, 'getter') or self._check_property_decorator(node, 'setter')\n    80\t                 return not is_prop\n    81\t            else: return False\n    82\t\n    83\t        elif isinstance(node, ast.ClassDef):\n    84\t            return self.element_type == CodeElementType.CLASS and node_name == self.target_name\n    85\t\n    86\t        elif isinstance(node, ast.Assign):\n    87\t             targets = getattr(node, 'targets', [])\n    88\t             is_static_prop_match = any(isinstance(t, ast.Name) and t.id == self.target_name for t in targets)\n    89\t             return self.element_type == CodeElementType.STATIC_PROPERTY and is_static_prop_match\n    90\t\n    91\t        # Imports are handled by visit_Module/visit_list for blocks\n    92\t        elif isinstance(node, (ast.Import, ast.ImportFrom)):\n    93\t             return self.element_type == CodeElementType.IMPORT and not self.is_import_block_replace\n    94\t\n    95\t        logger.debug(f\"Node type {type(node).__name__} at line {node.lineno} did not match expected logic for target {self.target_name} ({self.element_type.value})\")\n    96\t        return False\n    97\t\n    98\t    def _find_insertion_point(self, body: List[ast.AST]) -> int:\n    99\t        \"\"\"Determine where to insert the new node(s). (Improved placement)\"\"\"\n   100\t        insert_pos = len(body) # Default: append at the end\n   101\t\n   102\t        def find_after_last(node_types: tuple) -> int:\n   103\t            last_pos = -1\n   104\t            for i, node in enumerate(body):\n   105\t                if isinstance(node, node_types):\n   106\t                    last_pos = i\n   107\t            return last_pos + 1\n   108\t\n   109\t        if self.element_type == CodeElementType.IMPORT:\n   110\t            insert_pos = 0\n   111\t            if body and isinstance(body[0], ast.Expr) and isinstance(body[0].value, ast.Constant) and isinstance(body[0].value.value, str):\n   112\t                insert_pos = 1\n   113\t            while insert_pos < len(body) and isinstance(body[insert_pos], (ast.Import, ast.ImportFrom)):\n   114\t                insert_pos += 1\n   115\t            logger.debug(f\"Calculated insertion point for IMPORT: {insert_pos}\")\n   116\t\n   117\t        elif self.parent_name is not None: # Inserting into a class\n   118\t            insert_pos = 0\n   119\t            if body and isinstance(body[0], ast.Expr) and isinstance(body[0].value, ast.Constant) and isinstance(body[0].value.value, str):\n   120\t                insert_pos = 1\n   121\t            # Static properties right after docstring\n   122\t            while insert_pos < len(body) and isinstance(body[insert_pos], ast.Assign):\n   123\t                insert_pos += 1\n   124\t            if self.element_type == CodeElementType.STATIC_PROPERTY:\n   125\t                 logger.debug(f\"Calculated insertion point for STATIC_PROPERTY in class: {insert_pos}\")\n   126\t                 return insert_pos\n   127\t\n   128\t            # Methods/Properties usually go at the end, but before inner classes if any? Keep it simple: end.\n   129\t            insert_pos = len(body)\n   130\t            logger.debug(f\"Calculated insertion point for {self.element_type.value} in class: {insert_pos}\")\n   131\t\n   132\t        elif self.element_type == CodeElementType.FUNCTION or self.element_type == CodeElementType.CLASS:\n   133\t            insert_pos = find_after_last((ast.Import, ast.ImportFrom))\n   134\t            if body and isinstance(body[0], ast.Expr) and isinstance(body[0].value, ast.Constant) and isinstance(body[0].value.value, str):\n   135\t                 insert_pos = max(1, insert_pos) # Ensure after docstring\n   136\t\n   137\t            last_def_pos = -1\n   138\t            for i, node in enumerate(body):\n   139\t                 if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n   140\t                     last_def_pos = i\n   141\t            if last_def_pos != -1:\n   142\t                  # Find the actual index *after* the last definition block\n   143\t                  potential_pos = last_def_pos + 1\n   144\t                  # Simple append after last seems sufficient most times\n   145\t                  insert_pos = max(insert_pos, potential_pos)\n   146\t\n   147\t            logger.debug(f\"Calculated insertion point for {self.element_type.value} at module level: {insert_pos}\")\n   148\t\n   149\t        return insert_pos\n   150\t\n   151\t    def visit(self, node):\n   152\t        \"\"\"Visit nodes, handling replacement, then visiting children, then insertion.\"\"\"\n   153\t        # 1. Handle Replacement (if applicable to the node itself)\n   154\t        if self.is_replacing and not self.operation_done and self._is_target_node(node):\n   155\t            logger.info(f\"Replacing node {type(node).__name__} (target: {self.target_name}) at line {node.lineno} with {len(self.new_nodes)} new node(s).\")\n   156\t            self.operation_done = True\n   157\t            return self.new_nodes if self.new_nodes else None # Return list/None for visit_list\n   158\t\n   159\t        # 2. Visit Children (generic_visit handles recursion)\n   160\t        new_node = super().generic_visit(node)\n   161\t\n   162\t        # 3. Handle Insertion (if applicable within this node's body)\n   163\t        # Check node type *after* visiting children, as generic_visit returns the node\n   164\t        if new_node is None: # Node might have been deleted by a child visitor? Unlikely here but safe check.\n   165\t             return None\n   166\t\n   167\t        # Check if insertion is intended and hasn't happened yet\n   168\t        if not self.is_replacing and not self.operation_done:\n   169\t            is_module_target = (self.parent_name is None and isinstance(new_node, ast.Module))\n   170\t            is_class_target = (self.parent_name is not None and isinstance(new_node, ast.ClassDef) and new_node.name == self.parent_name)\n   171\t\n   172\t            if is_module_target or is_class_target:\n   173\t                if hasattr(new_node, 'body') and isinstance(new_node.body, list):\n   174\t                    logger.info(f\"Attempting to insert new nodes into {'Module' if is_module_target else f'Class {self.parent_name}'}\")\n   175\t                    insert_pos = self._find_insertion_point(new_node.body)\n   176\t\n   177\t                    # Adjust line numbers (simple heuristic)\n   178\t                    base_lineno = 1\n   179\t                    if insert_pos > 0 and hasattr(new_node.body[insert_pos-1], 'end_lineno') and new_node.body[insert_pos-1].end_lineno is not None:\n   180\t                         base_lineno = new_node.body[insert_pos-1].end_lineno + 1\n   181\t                    elif insert_pos < len(new_node.body) and hasattr(new_node.body[insert_pos], 'lineno') and new_node.body[insert_pos].lineno is not None:\n   182\t                         base_lineno = new_node.body[insert_pos].lineno\n   183\t                    elif hasattr(new_node,'lineno') and new_node.lineno is not None:\n   184\t                         base_lineno = new_node.lineno + 1\n   185\t\n   186\t                    logger.debug(f\"Adjusting lineno for new nodes, starting from ~{base_lineno}\")\n   187\t                    current_lineno = base_lineno\n   188\t                    for i, n_node in enumerate(self.new_nodes):\n   189\t                         for child_node in ast.walk(n_node):\n   190\t                              if hasattr(child_node, 'lineno'): child_node.lineno = current_lineno\n   191\t                              if hasattr(child_node, 'col_offset'): child_node.col_offset = 0 # Reset col offset\n   192\t                         # Increment line number for next node based on unparsed lines\n   193\t                         try:\n   194\t                             num_lines = len(ast.unparse(n_node).splitlines())\n   195\t                             current_lineno += num_lines\n   196\t                         except: current_lineno +=1 # Fallback\n   197\t\n   198\t                    # Perform insertion\n   199\t                    original_body_len = len(new_node.body)\n   200\t                    new_node.body = new_node.body[:insert_pos] + self.new_nodes + new_node.body[insert_pos:]\n   201\t                    if len(new_node.body) > original_body_len:\n   202\t                         logger.info(f\"Inserted {len(self.new_nodes)} node(s) at index {insert_pos}.\")\n   203\t                         self.operation_done = True\n   204\t                    else:\n   205\t                         logger.warning(f\"Insertion attempt at index {insert_pos} did not change body length.\")\n   206\t                else:\n   207\t                     logger.error(f\"Target node {type(new_node).__name__} for insertion does not have a list 'body'.\")\n   208\t\n   209\t        return new_node\n   210\t\n   211\t    # visit_list is crucial for handling replacements correctly\n   212\t    def visit_list(self, nodes: List[Any]) -> List[Any]:\n   213\t        new_list = []\n   214\t        for node in nodes:\n   215\t            result = self.visit(node) # visit handles replacement check first\n   216\t            if result is None: # Node deleted\n   217\t                continue\n   218\t            elif isinstance(result, list): # Node replaced by multiple nodes\n   219\t                new_list.extend(result)\n   220\t            else: # Single node returned (original or replaced)\n   221\t                new_list.append(result)\n   222\t        return new_list\n   223\t\n   224\t    # Override visitors for common node types with 'body' lists\n   225\t    def visit_Module(self, node: ast.Module) -> Any:\n   226\t        # Special handling for import block replacement\n   227\t        if self.is_import_block_replace and not self.operation_done:\n   228\t             logger.info(f\"Performing import block replacement (Lines {self.target_start_line}-{self.target_end_line})\")\n   229\t             new_body = []\n   230\t             processed_import_block = False\n   231\t             # Copy nodes before the import block\n   232\t             for i, item in enumerate(node.body):\n   233\t                 if item.lineno < self.target_start_line:\n   234\t                      new_body.append(item) # Keep nodes before the block start\n   235\t                 else:\n   236\t                      break # Reached the block\n   237\t\n   238\t             # Insert new import nodes\n   239\t             if self.new_nodes:\n   240\t                  logger.debug(f\"Inserting {len(self.new_nodes)} new import nodes.\")\n   241\t                  # Adjust lineno heuristically\n   242\t                  base_lineno = new_body[-1].end_lineno + 1 if new_body and hasattr(new_body[-1],'end_lineno') else 1\n   243\t                  current_lineno = base_lineno\n   244\t                  for i, n_node in enumerate(self.new_nodes):\n   245\t                       for child_node in ast.walk(n_node):\n   246\t                            if hasattr(child_node, 'lineno'): child_node.lineno = current_lineno\n   247\t                            if hasattr(child_node, 'col_offset'): child_node.col_offset = 0\n   248\t                       try: num_lines = len(ast.unparse(n_node).splitlines()); current_lineno += num_lines\n   249\t                       except: current_lineno += 1\n   250\t                  new_body.extend(self.new_nodes)\n   251\t\n   252\t             # Skip original nodes within the replaced block range\n   253\t             for i, item in enumerate(node.body):\n   254\t                 if item.lineno >= self.target_start_line and hasattr(item, 'end_lineno') and item.end_lineno <= self.target_end_line:\n   255\t                      continue # Skip nodes within the block\n   256\t                 # Special case: node starts within block but ends after (unlikely for imports)\n   257\t                 elif item.lineno >= self.target_start_line and item.lineno <= self.target_end_line:\n   258\t                      continue\n   259\t                 # Keep nodes after the block\n   260\t                 elif item.lineno > self.target_end_line:\n   261\t                      new_body.append(item)\n   262\t\n   263\t             node.body = self.visit_list(new_body) # Visit the newly constructed body\n   264\t             self.operation_done = True # Mark operation as done\n   265\t             return node # Return the modified node\n   266\t\n   267\t        # Default processing if not import block replacement\n   268\t        node.body = self.visit_list(node.body)\n   269\t        # Allow generic_visit to handle potential insertion into the module body\n   270\t        return super().generic_visit(node)\n   271\t\n   272\t    def visit_ClassDef(self, node: ast.ClassDef) -> Any:\n   273\t        node.body = self.visit_list(node.body)\n   274\t        # Allow generic_visit to handle potential insertion or replacement of the class itself\n   275\t        return super().generic_visit(node)\n   276\t\n   277\t    def visit_FunctionDef(self, node: ast.FunctionDef) -> Any:\n   278\t        node.body = self.visit_list(node.body)\n   279\t        # Allow generic_visit for replacement check of the function itself\n   280\t        return super().generic_visit(node)\n   281\t\n   282\t    def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -> Any:\n   283\t        node.body = self.visit_list(node.body)\n   284\t         # Allow generic_visit for replacement check of the function itself\n   285\t        return super().generic_visit(node)\n   286\t\n   287\tclass PythonASTManipulator(ManipulatorBase):\n   288\t    \"\"\"\n   289\t    AST-based manipulator for Python code using ast.NodeTransformer.\n   290\t    Supports robust insertion, replacement of classes, functions, methods,\n   291\t    properties, and imports. (Version 3)\n   292\t    \"\"\"\n   293\t\n   294\t    def __init__(self, *args, **kwargs):\n   295\t        super().__init__(*args, **kwargs)\n   296\t\n   297\t    def _get_element_type_for_upsert(self, element_type_str: str, new_code: str) -> CodeElementType:\n   298\t        \"\"\"Determine the CodeElementType enum.\"\"\"\n   299\t        if element_type_str and element_type_str != 'unknown':\n   300\t             try: return CodeElementType(element_type_str)\n   301\t             except ValueError: logger.warning(f\"Invalid element_type string '{element_type_str}'. Attempting detection.\")\n   302\t\n   303\t        stripped_code = new_code.strip()\n   304\t        if not stripped_code:\n   305\t             if element_type_str and element_type_str != 'unknown':\n   306\t                  try: return CodeElementType(element_type_str) # Use provided type if deleting\n   307\t                  except ValueError: pass\n   308\t             raise ValueError(\"Cannot determine element type for deletion without explicit type or parsable new_code.\")\n   309\t\n   310\t        if stripped_code.startswith(('def ', 'async def')):\n   311\t             # Needs context (parent_name) to be METHOD vs FUNCTION. Default to FUNCTION.\n   312\t             return CodeElementType.FUNCTION\n   313\t        elif stripped_code.startswith('class '): return CodeElementType.CLASS\n   314\t        elif stripped_code.startswith(('import ', 'from ')): return CodeElementType.IMPORT\n   315\t        elif '=' in stripped_code.splitlines()[0]: return CodeElementType.STATIC_PROPERTY\n   316\t\n   317\t        logger.error(f\"Could not determine element type for upsert from '{element_type_str}' or code snippet.\")\n   318\t        raise ValueError(f\"Invalid or undetectable element type: {element_type_str}\")\n   319\t\n   320\t    def upsert_element(self, original_code: str, element_type_str: str, name: str, new_code: str, parent_name: Optional[str] = None) -> str:\n   321\t        \"\"\" Add or replace a code element using AST transformation. \"\"\"\n   322\t        logger.info(f\"AST Upsert: type='{element_type_str}', name='{name}', parent='{parent_name}'\")\n   323\t\n   324\t        try: element_type = self._get_element_type_for_upsert(element_type_str, new_code)\n   325\t        except ValueError as e: logger.error(f\"Cannot perform upsert: {e}\"); return original_code\n   326\t\n   327\t        # Refine type guess based on context\n   328\t        if element_type == CodeElementType.FUNCTION and parent_name: element_type = CodeElementType.METHOD\n   329\t        logger.info(f\"Processing as element type: {element_type.value}\")\n   330\t\n   331\t        target_start_line, target_end_line = None, None\n   332\t        is_replacing = False\n   333\t        is_deleting = not new_code.strip()\n   334\t\n   335\t        # Find existing element range\n   336\t        if name and name != 'all':\n   337\t            try:\n   338\t                 search_types = [element_type]\n   339\t                 # Add alternatives if initial type might be ambiguous\n   340\t                 if element_type == CodeElementType.METHOD: search_types.extend([CodeElementType.PROPERTY_GETTER, CodeElementType.PROPERTY_SETTER])\n   341\t                 elif element_type == CodeElementType.FUNCTION and parent_name: search_types.append(CodeElementType.METHOD)\n   342\t\n   343\t                 for search_type in search_types:\n   344\t                      start, end = self.extraction_service.find_element(original_code, search_type.value, name, parent_name)\n   345\t                      if start > 0:\n   346\t                           target_start_line, target_end_line = start, end\n   347\t                           if search_type != element_type:\n   348\t                                logger.info(f\"Adjusting type to found type: {search_type.value}\")\n   349\t                                element_type = search_type # Correct type based on finding\n   350\t                           break\n   351\t                 if target_start_line is not None:\n   352\t                     is_replacing = True\n   353\t                     action = \"DELETE\" if is_deleting else \"REPLACE\"\n   354\t                     logger.info(f\"Planning to {action} existing element '{name}' (type {element_type.value}) at lines {target_start_line}-{target_end_line}\")\n   355\t                 else:\n   356\t                     if is_deleting: logger.error(f\"Cannot delete element '{name}': Not found.\"); return original_code\n   357\t                     logger.info(f\"Element '{name}' not found. Planning to INSERT.\")\n   358\t            except Exception as e:\n   359\t                 logger.error(f\"Error finding element '{name}': {e}. Assuming insertion.\")\n   360\t                 if is_deleting: return original_code\n   361\t        elif element_type == CodeElementType.IMPORT:\n   362\t             try:\n   363\t                 target_start_line, target_end_line = self.extraction_service._find_import_block_range(original_code)\n   364\t                 if target_start_line == 0: target_start_line, target_end_line = None, None\n   365\t                 if target_start_line is not None:\n   366\t                     is_replacing = True\n   367\t                     action = \"DELETE\" if is_deleting else \"REPLACE\"\n   368\t                     logger.info(f\"Planning to {action} import block at lines {target_start_line}-{target_end_line}\")\n   369\t                 elif is_deleting: logger.warning(\"Cannot delete import block: Not found.\"); return original_code\n   370\t                 else: logger.info(\"Import block not found. Planning to INSERT import(s).\")\n   371\t             except Exception as e:\n   372\t                 logger.error(f\"Error finding import block range: {e}. Assuming insertion.\")\n   373\t                 if is_deleting: return original_code\n   374\t        else: # No name / not import block\n   375\t             if is_deleting: logger.error(f\"Cannot delete element: No name specified.\"); return original_code\n   376\t             logger.info(f\"No valid name for replacement. Planning to INSERT.\")\n   377\t\n   378\t        # Parse original code\n   379\t        try: original_tree = ast.fix_missing_locations(ast.parse(original_code))\n   380\t        except SyntaxError as e: logger.error(f\"Syntax error in original code: {e}\"); return original_code\n   381\t\n   382\t        # Parse new code snippet (or handle deletion)\n   383\t        new_nodes: List[ast.AST] = []\n   384\t        if not is_deleting:\n   385\t            try:\n   386\t                new_code_stripped = new_code.strip()\n   387\t                if not new_code_stripped: raise ValueError(\"Cannot upsert empty code snippet unless deleting.\")\n   388\t                new_tree = ast.parse(new_code_stripped); new_nodes = new_tree.body\n   389\t                if not isinstance(new_nodes, list): new_nodes = [new_nodes]\n   390\t                if not new_nodes: logger.warning(\"New code snippet parsed into an empty list of nodes. Treating as deletion if replacing.\")\n   391\t                if not new_nodes and is_replacing: is_deleting = True\n   392\t                elif not new_nodes and not is_replacing: raise ValueError(\"Cannot insert empty parsed nodes.\")\n   393\t            except SyntaxError as e: logger.error(f\"Syntax error in new code snippet: {e}\"); return original_code\n   394\t            except Exception as e: logger.error(f\"Error parsing new code snippet: {e}\"); return original_code\n   395\t        else: logger.debug(\"Proceeding with deletion (new_nodes is empty).\")\n   396\t\n   397\t        # Apply transformation\n   398\t        modified_tree = None\n   399\t        transformer = None\n   400\t        try:\n   401\t            transformer = ReplaceOrInsertTransformer(\n   402\t                target_start_line=target_start_line, target_end_line=target_end_line,\n   403\t                new_nodes=new_nodes, parent_name=parent_name,\n   404\t                element_type=element_type, target_name=name if name != 'all' else None # Pass None name for block replace\n   405\t            )\n   406\t            modified_tree = transformer.visit(original_tree)\n   407\t            if modified_tree is None: logger.info(\"Transformation resulted in empty AST.\"); return \"\\n\"\n   408\t            modified_tree = ast.fix_missing_locations(modified_tree)\n   409\t\n   410\t            if not transformer.operation_done:\n   411\t                 action = \"replace/delete\" if is_replacing else \"insert\"\n   412\t                 logger.error(f\"Transformer failed to {action} element '{name}' \"\n   413\t                              f\"{f'at lines {target_start_line}-{target_end_line}' if is_replacing else f'into parent {parent_name}'}.\")\n   414\t                 return original_code # Return original if operation failed\n   415\t\n   416\t            logger.info(f\"Transformer operation successful: {'Replaced/Deleted' if is_replacing else 'Inserted'}\")\n   417\t        except Exception as e:\n   418\t            logger.error(f\"Error during AST transformation: {e}\", exc_info=True)\n   419\t            return original_code\n   420\t\n   421\t        # Unparse the modified tree\n   422\t        try:\n   423\t            if not isinstance(modified_tree, ast.AST):\n   424\t                 logger.error(f\"Transformation resulted in non-AST type: {type(modified_tree)}. Cannot unparse.\")\n   425\t                 return original_code\n   426\t            new_source = ast.unparse(modified_tree)\n   427\t            if new_source and not new_source.endswith('\\n'): new_source += '\\n'\n   428\t            logger.info(\"Unparsing successful.\")\n   429\t            # --- Debug comparison ---\n   430\t            # if new_source == original_code:\n   431\t            #      logger.warning(\"Code seems unchanged after upsert operation.\")\n   432\t            # else:\n   433\t            #      logger.info(\"Code modified.\")\n   434\t            # ----------------------\n   435\t            return new_source\n   436\t        except Exception as e:\n   437\t            logger.error(f\"Error unparsing modified AST: {e}\", exc_info=True)\n   438\t            return original_code\n   439\t\n   440\t    def add_element(self, original_code: str, new_code: str, parent_name: Optional[str]=None) -> str:\n   441\t        logger.debug(f\"Calling add_element for parent '{parent_name}'\")\n   442\t        try:\n   443\t            new_tree = ast.parse(new_code.strip())\n   444\t            if not new_tree.body: logger.error(\"Cannot add empty element.\"); return original_code\n   445\t            node_to_add = new_tree.body[0]\n   446\t            temp_name = getattr(node_to_add, 'name', None)\n   447\t            # Let upsert handle type deduction by passing \"unknown\"\n   448\t            temp_type_str = \"unknown\"\n   449\t            if isinstance(node_to_add, (ast.Import, ast.ImportFrom)): temp_name = 'all'\n   450\t\n   451\t            if temp_name and temp_type_str:\n   452\t                return self.upsert_element(original_code, temp_type_str, temp_name, new_code, parent_name)\n   453\t            else: logger.error(f\"Could not deduce name/type for add_element: {new_code[:100]}...\")\n   454\t        except Exception as e: logger.error(f\"Error preparing for add_element: {e}\")\n   455\t        return original_code\n   456\t\n   457\t    def replace_element(self, original_code: str, name: str, new_code: str, parent_name: Optional[str]=None) -> str:\n   458\t        logger.debug(f\"Calling replace_element for '{name}', parent '{parent_name}' - delegating type detection to upsert.\")\n   459\t        # Pass \"unknown\" - upsert will try to find existing or deduce from new_code\n   460\t        return self.upsert_element(original_code, \"unknown\", name, new_code, parent_name)\n   461\t\n   462\t    def remove_element(self, original_code: str, name: str, parent_name: Optional[str]=None) -> str:\n   463\t        logger.debug(f\"Calling remove_element for '{name}', parent '{parent_name}' - delegating type detection to upsert.\")\n   464\t        # Pass \"unknown\" - upsert will try to find the element first to determine type\n   465\t        return self.upsert_element(original_code, \"unknown\", name, \"\", parent_name)\n   466\t\n   467\t    def upsert_element_by_xpath(self, original_code: str, xpath: str, new_code: str) -> str:\n   468\t        from codehem.core.engine.xpath_parser import XPathParser\n   469\t        logger.debug(f\"Calling upsert_element_by_xpath for '{xpath}'\")\n   470\t        try:\n   471\t            element_name, parent_name, element_type_str_from_xpath = XPathParser.get_element_info(xpath)\n   472\t            op_element_type_str = element_type_str_from_xpath if element_type_str_from_xpath else \"unknown\"\n   473\t            op_name = element_name\n   474\t            if not op_name and op_element_type_str == CodeElementType.IMPORT.value: op_name = 'all'\n   475\t            elif not op_name:\n   476\t                 # Try deducing name from new_code if XPath was like '[class]'\n   477\t                 try:\n   478\t                      new_tree = ast.parse(new_code.strip())\n   479\t                      if new_tree.body and hasattr(new_tree.body[0], 'name'): op_name = new_tree.body[0].name\n   480\t                      else: raise ValueError(\"Cannot determine name for XPath upsert.\")\n   481\t                 except Exception as parse_err:\n   482\t                      logger.error(f\"Could not deduce name from new code for XPath '{xpath}': {parse_err}\")\n   483\t                      raise ValueError(f\"Cannot upsert via XPath '{xpath}' without name.\")\n   484\t\n   485\t            return self.upsert_element(original_code, op_element_type_str, op_name, new_code, parent_name)\n   486\t        except Exception as e:\n   487\t             logger.error(f\"Error processing XPath upsert for '{xpath}': {e}\", exc_info=True)\n   488\t             return original_code\nTotal lines in file: 488\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01E8MjjcYoRPWGpHMQZSUF1m"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/code/CodeHem","folderRoot":"D:/code/CodeHem"}],"workspaceFoldersUnchanged":false}}],"response_text":"## Python AST Manipulator - Wyjaśnienie\n\nPython AST Manipulator to zaawansowany komponent w CodeHem, który służy do manipulacji kodem Python przy użyciu Abstract Syntax Tree (AST). Oto szczegółowe wyjaśnienie:\n\n### Czym jest Python AST Manipulator\n\nPython AST Manipulator to specjalistyczny manipulator, który wykorzystuje moduł `ast` z biblioteki standardowej Pythona do analizy i modyfikacji kodu źródłowego na poziomie drzewa składniowego. W przeciwieństwie do prostszych manipulatorów opartych na tekście, AST Manipulator:\n\n1. **Parsuje kod do drzewa AST** - konwertuje kod źródłowy na strukturę drzewa, która reprezentuje jego składnię\n2. **Modyfikuje drzewo AST** - dodaje, usuwa lub zmienia węzły w drzewie\n3. **Konwertuje zmodyfikowane drzewo z powrotem na kod** - używając funkcji `ast.unparse()`\n\n### Główne komponenty\n\n1. **ReplaceOrInsertTransformer** (linie 9-285):\n   - Klasa dziedzicząca po `ast.NodeTransformer`\n   - Odpowiada za przechodzenie przez drzewo AST i wykonywanie operacji zastępowania lub wstawiania węzłów\n   - Zawiera logikę do identyfikacji węzłów docelowych i określania punktów wstawiania\n\n2. **PythonASTManipulator** (linie 287-488):\n   - Implementacja `ManipulatorBase` używająca AST\n   - Zapewnia metody wysokiego poziomu do manipulacji kodem:\n     - `upsert_element` - dodaje lub zastępuje element kodu\n     - `add_element` - dodaje nowy element\n     - `replace_element` - zastępuje istniejący element\n     - `remove_element` - usuwa element\n     - `upsert_element_by_xpath` - dodaje lub zastępuje element używając wyrażenia XPath\n\n### Jak działa\n\n1. **Analiza kodu źródłowego**:\n   ```python\n   original_tree = ast.fix_missing_locations(ast.parse(original_code))\n   ```\n\n2. **Identyfikacja elementu do modyfikacji**:\n   - Znajduje element w kodzie używając usługi ekstrakcji\n   - Określa jego pozycję (numery linii)\n   - Identyfikuje typ elementu (funkcja, klasa, metoda, import)\n\n3. **Transformacja AST**:\n   ```python\n   transformer = ReplaceOrInsertTransformer(...)\n   modified_tree = transformer.visit(original_tree)\n   ```\n\n4. **Konwersja z powrotem na kod**:\n   ```python\n   new_source = ast.unparse(modified_tree)\n   ```\n\n### Zalety podejścia AST\n\n1. **Świadomość składni** - manipulacje są wykonywane z pełnym zrozumieniem struktury kodu\n2. **Odporność na błędy** - mniejsze ryzyko uszkodzenia kodu\n3. **Obsługa złożonych przypadków** - np. bloki importów, dekoratory, właściwości\n4. **Zachowanie formatowania** - lepsze zachowanie struktury kodu\n\n### Integracja z systemem\n\nW pliku `codehem/languages/lang_python/__init__.py` widać, że Python AST Manipulator jest rejestrowany dla różnych typów elementów kodu:\n\n```python\n# Register AST manipulators for function, class, import\nfor element_type_enum in [\n    CodeElementType.FUNCTION,\n    CodeElementType.CLASS,\n    CodeElementType.IMPORT,\n]:\n    # ...\n    registry.register_manipulator(Wrapper)\n```\n\nPython AST Manipulator stanowi więc zaawansowaną alternatywę dla prostszych manipulatorów opartych na tekście, zapewniając bardziej niezawodne i precyzyjne modyfikacje kodu Python.\n","workspace_file_chunks":[]}],"feedbackStates":{"temp-fe-cea11f08-5c4b-4d4f-b3a1-b040ee16fdb5":{"selectedRating":0,"feedbackNote":""},"temp-fe-58acd6be-660a-42bf-b6d4-6a46302d8c57":{"selectedRating":0,"feedbackNote":""},"temp-fe-4119805b-514f-431c-961b-a61d3935028c":{"selectedRating":0,"feedbackNote":""},"temp-fe-d741789d-da53-4e1f-85e1-2c3f981a26fc":{"selectedRating":0,"feedbackNote":""},"temp-fe-a5c112ab-09b2-43e0-beaa-964f2a32196a":{"selectedRating":0,"feedbackNote":""},"temp-fe-cb707158-6aee-4f83-83f4-bd6d89119012":{"selectedRating":0,"feedbackNote":""},"temp-fe-7a33e37c-de20-43fe-ad6b-c9da1e876f40":{"selectedRating":0,"feedbackNote":""}},"toolUseStates":{"710e01a7-9e38-4290-9fac-6501b1c4c8f2;toolu_vrtx_01UwvaR5rrjd3xCDCoYK9Vnp":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: codehem/main.py\nimport os\nimport logging\nfrom typing import List, Optional, Tuple\n\nfrom .core.engine.xpath_parser import XPathParser\nfrom .core.extraction_service import ExtractionService\nfrom .core.manipulation_service import ManipulationService\nfrom .languages import (\n    get_language_service,\n    get_language_service_for_code,\n    get_language_service_for_file,\n    get_supported_languages,\n)\nfrom .models.code_element import CodeElement, CodeElementsResult\nfrom .models.enums import CodeElementType\nfrom .models.xpath import CodeElementXPathNode\n\nlogger = logging.getLogger(__name__)\n\nclass CodeHem:\n    \"\"\"\n    Main entry point for CodeHem.\n    Provides language-agnostic interface for code manipulation.\n    \"\"\"\n\n    def __init__(self, language_code: str):\n        \"\"\"\n        Initialize CodeHem for a specific language.\n\n        Args:\n            language_code: Language code (e.g., 'python', 'typescript')\n\n        Raises:\n            ValueError: If the language is not supported\n        \"\"\"\n        self.language_service = get_language_service(language_code)\n        if not self.language_service:\n            raise ValueError(f\"Unsupported language: {language_code}\")\n...\n\n    @classmethod\n    def from_raw_code(cls, code: str) -> \"CodeHem\":\n        \"\"\"\n        Create a CodeHem instance by detecting language from code.\n\n        Args:\n            code: Source code as string\n\n        Returns:\n            CodeHem instance\n\n        Raises:\n            ValueError: If the language could not be detected\n        \"\"\"\n        language_service = get_language_service_for_code(code)\n        if not language_service:\n            # Raise error instead of defaulting to Python\n            raise ValueError(\"Could not detect language from code\")\n            # return cls('python') # Old behavior\n        return cls(language_service.language_code)\n\n    @staticmethod\n    def supported_languages() -> List[str]:\n        \"\"\"\n        Get a list of supported language codes.\n\n        Returns:\n            List of supported language codes\n        \"\"\"\n        return get_supported_languages()\n...\n\n    def upsert_element(\n        self,\n        original_code: str,\n        element_type: str,\n        name: str,\n        new_code: str,\n        parent_name: Optional[str] = None,\n    ) -> str:\n        \"\"\"\n        Add or replace an element in the code.\n\n        Args:\n            original_code: Original source code\n            element_type: Type of element to add/replace (from CodeElementType)\n            name: Name of the element\n            new_code: New content for the element\n            parent_name: Name of parent element (e.g., class name for methods)\n\n        Returns:\n            Modified code\n        \"\"\"\n        if not self.manipulation:\n             raise RuntimeError(\"Manipulation service not initialized.\")\n        return self.manipulation.upsert_element(\n            original_code, element_type, name, new_code, parent_name\n        )\n...\n\n    def upsert_element_by_xpath(\n        self, original_code: str, xpath: str, new_code: str\n    ) -> str:\n        \"\"\"\n        Add or replace an element in the code using XPath expression.\n        Automatically prepends \"FILE.\" if missing.\n\n        Args:\n            original_code: Original source code\n            xpath: XPath expression (e.g., 'ClassName.method_name', 'ClassName[interface].method_name[property_getter]')\n            new_code: New content for the element\n\n        Returns:\n            Modified code\n        \"\"\"\n        if not self.manipulation:\n            raise RuntimeError(\"Manipulation service not initialized.\")\n        # Ensure xpath starts with FILE. before passing to manipulation service\n        processed_xpath = self._ensure_file_prefix(xpath)\n        return self.manipulation.upsert_element_by_xpath(\n            original_code, processed_xpath, new_code\n        )\n\n    # --- ZMIANA: Wykorzystanie _ensure_file_prefix ---\n    def find_by_xpath(self, code: str, xpath: str) -> Tuple[int, int]:\n        \"\"\"\n        Find an element's location using an XPath expression.\n        Automatically prepends \"FILE.\" if missing.\n\n        Args:\n            code: Source code as string\n            xpath: XPath expression (e.g., 'ClassName.method_name', 'ClassName[interface].method_name[property_getter]')\n\n        Returns:\n            Tuple of (start_line, end_line) or (0, 0) if not found\n        \"\"\"\n        if not self.extraction:\n             raise RuntimeError(\"Extraction service not initialized.\")\n        processed_xpath = self._ensure_file_prefix(xpath)\n        return self.extraction.find_by_xpath(code, processed_xpath)\n...\n\n        Returns:\n            Text content of the element, or None if not found\n        \"\"\"\n        if not self.language_service:\n            raise RuntimeError(\"Language service not initialized.\")\n        # Ensure xpath starts with FILE. before parsing\n        processed_xpath = self._ensure_file_prefix(xpath)\n        try:\n            # Parse the potentially modified xpath\n            xpath_nodes = XPathParser.parse(processed_xpath)\n            if not xpath_nodes:\n                 logger.warning(f\"Could not parse XPath: '{processed_xpath}'\")\n                 return None\n            # Call internal method with parsed nodes\n            return self.language_service.get_text_by_xpath_internal(code, xpath_nodes)\n        except Exception as e:\n             logger.error(f\"Error getting text by XPath '{xpath}' (processed: '{processed_xpath}'): {e}\", exc_info=True)\n             return None\n\n    def extract(self, code: str) -> CodeElementsResult:\n        \"\"\"\n        Extract code elements from the source code.\n\n        Args:\n            code: Source code as string\n\n        Returns:\n            CodeElementsResult containing extracted elements\n        \"\"\"\n        if not self.extraction:\n             raise RuntimeError(\"Extraction service not initialized.\")\n        return self.extraction.extract_all(code)\n\n    @staticmethod\n    def _ensure_file_prefix_static(xpath: str) -> str:\n        \"\"\"Static helper to ensure XPath starts with FILE.\"\"\"\n        root_prefix = XPathParser.ROOT_ELEMENT + \".\"\n        if not xpath.startswith(root_prefix) and not xpath.startswith(\"[\"):\n            # Note: Static method doesn't have logger instance easily\n            # print(f\"DEBUG: XPath '{xpath}' does not start with '{root_prefix}'. Prepending it.\")\n            xpath = root_prefix + xpath\n        return xpath\n\n    @staticmethod\n    def filter(elements: CodeElementsResult, xpath: str = \"\") -> Optional[CodeElement]:\n        \"\"\"\n        Filter code elements based on XPath expression.\n        Automatically prepends \"FILE.\" if missing.\n\n        Args:\n            elements: CodeElementsResult containing elements\n            xpath: XPath expression (e.g., 'ClassName.method_name', 'ClassName[interface].method_name[property_getter]')\n\n        Returns:\n            Matching CodeElement or None if not found\n        \"\"\"\n        if not xpath or not elements or not hasattr(elements, 'elements') or not elements.elements:\n            return None\n\n        # Ensure xpath starts with FILE. before parsing\n        processed_xpath = CodeHem._ensure_file_prefix_static(xpath)\n\n        try:\n            # Parse the potentially modified xpath\n            element_name, parent_name, element_type = XPathParser.get_element_info(processed_xpath)\n...\nPath: README.md\n# CodeHem\n\nCodeHem is a language-agnostic library designed for sophisticated querying and manipulation of source code. \nIt provides a high-level interface to effortlessly navigate, analyze, and modify code elements such as functions, \nclasses, methods, and properties across multiple programming languages, including Python, JavaScript, and TypeScript.\n\n## Key Features\n\n- **Advanced Code Querying**: Easily locate functions, classes, methods, properties, imports, and more within your source code, using a uniform, intuitive API.\n- **Powerful Code Manipulation**: Replace, add, or remove functions, methods, classes, properties, or entire code sections with minimal effort.\n- **Syntax-aware Operations**: Ensures accurate manipulation preserving syntax integrity through the `tree-sitter` parser.\n- **Language Detection**: Automatically identifies the programming language based on file extensions or code analysis.\n- **Extensible Architecture**: Easily add support for new programming languages through the strategy pattern.\n\n## Supported Languages\n\n- Python\n- JavaScript / TypeScript (including TSX)\n\n## Installation\n\n### Using pip / pipx\n\nThe simplest way to install CodeHem:\n\n```bash\npip install codehem\n````\nor\n\n```bash\npipx install codehem\n````\n\n## Project Structure\n\n```\nCodeHem/\n├── ast_handler.py            # Unified interface for AST operations\n├── caching/                  # Performance optimization through caching\n│   ├── __init__.py\n│   └── cache_manager.py\n│\n├── finder/                   # Code element location\n│   ├── base.py               # Abstract base class for querying code elements\n│   ├── factory.py            # Factory for creating code finders\n│   └── lang/\n│       ├── python_code_finder.py\n│       └── typescript_code_finder.py\n│\n├── formatting/               # Code formatting system\n│   ├── __init__.py\n│   ├── formatter.py          # Base formatter class\n│   ├── python_formatter.py   # Python-specific formatter\n│   └── typescript_formatter.py # TypeScript-specific formatter\n│\n├── language_handler.py       # High-level language handling interface (LangHem)\n├── languages.py              # Language definitions and parsers\n│\n├── manipulator/              # Code manipulation\n│   ├── abstract.py           # Abstract interface for code manipulators\n│   ├── base.py               # Base implementation\n│   ├── factory.py            # Factory for manipulators\n│   └── lang/\n│       ├── python_manipulator.py\n│       └── typescript_manipulator.py\n│\n├── query_builder.py          # Unified query construction\n│\n├── strategies/               # Strategy pattern for language-specific operations\n│   ├── __init__.py\n│   ├── language_strategy.py  # Abstract strategy interface\n│   ├── python_strategy.py    # Python-specific strategy\n│   └── typescript_strategy.py # TypeScript-specific strategy\n│\n├── templates/                # Templates for adding new languages\n│   └── new_language_template.py\n│\n└── utils/\n    └── logs.py               # Logging utilities\n## Usage Example\n\n### Querying Code\n\nhandler = CodeHem('python')\n\ncode = '''\nclass Example:\n    def greet(self):\n        print(\"Hello\")\n'''\n\n# Find method location\nstart, end = handler.finder.find_method(code, 'Example', 'greet')\nprint(f'Method found from line {start} to {end}')\n### Manipulating Code\n\n\noriginal_code = '''\ndef greet():\n    print(\"Hello\")\n'''\n\nnew_function = '''\ndef greet():\n    print(\"Hello, World!\")\n'''\n\nmodified_code = handler.manipulator.replace_function(original_code, 'greet', new_function)\n```\n\n## Contributing\n\nWe warmly welcome contributions, whether it's through reporting issues, suggesting enhancements, or submitting pull requests. Feel free to participate!\n\n## License\n\nThis project is licensed under the MIT license. See `LICENSE` for details....\nPath: codehem2/languages/detection.py\n...\n\n        # Boost confidence for short snippets with strong indicators\n        if num_lines < 10 and score > 30:\n            confidence = max(confidence, 0.7)\n        if num_lines < 5 and score > 15:\n             confidence = max(confidence, 0.6)\n\n        logger.debug(f\"Python detection confidence: {confidence:.2f} (Score: {score}, Lines: {num_lines})\")\n        return confidence\n\n# TODO: Add detectors for TypeScript, JavaScript etc.\n# class TypeScriptLanguageDetector(BaseLanguageDetector): ...\n\n# --- Detection Function ---\n\n_DETECTORS: List[BaseLanguageDetector] = [\n    PythonLanguageDetector(),\n    # Add other detector instances here\n    # TypeScriptLanguageDetector(),\n]\n...\n\n    best_match: Optional[str] = None\n    highest_confidence: float = 0.0\n    min_confidence_threshold = 0.3 # Minimum confidence to consider a match\n\n    logger.debug(f\"Attempting language detection for code snippet (length: {len(code)}).\")\n\n    for detector in _DETECTORS:\n        try:\n            confidence = detector.detect_confidence(code)\n            logger.debug(f\"  Detector '{detector.language_code}' confidence: {confidence:.3f}\")\n            if confidence > highest_confidence and confidence >= min_confidence_threshold:\n                highest_confidence = confidence\n                best_match = detector.language_code\n        except Exception as e:\n            logger.error(f\"Error running detector {detector.language_code}: {e}\", exc_info=False)\n...\nPath: codehem/languages/__init__.py\n...\n\ndef get_language_service_for_code(code: str) -> Optional[LanguageService]:\n    \"\"\"\n    Attempt to detect language from code content.\n    This is a heuristic approach and not 100% reliable.\n    \"\"\"\n    if not code.strip():\n        return None\n    \n    results = []\n    # Use all available detectors\n    for language_code in registry.get_supported_languages():\n        detector = registry.get_language_detector(language_code)\n        if detector:\n            confidence = detector.detect_confidence(code)\n            logger.debug(f\"Language detection confidence for {language_code}: {confidence}\")\n            if confidence > 0:\n                results.append((language_code, confidence))\n    \n    if not results:\n        logger.debug(\"No language detected\")\n        return None\n    \n    # Sort by confidence score\n    results.sort(key=lambda x: x[1], reverse=True)\n    logger.debug(f\"Best language match: {results[0][0]} with confidence {results[0][1]}\")\n    \n    # Use the language with the highest confidence if it's above a threshold\n    if results[0][1] > 0.5:\n        return get_language_service(results[0][0])\n    \n    # Fallback to basic pattern matching\n    if re.search('def\\\\s+\\\\w+\\\\s*\\\\(', code) and re.search(':\\\\s*\\\\n', code):\n        return get_language_service('python')\n    elif re.search('function\\\\s+\\\\w+\\\\s*\\\\(', code) or re.search(':\\\\s*\\\\w+', code):\n        return get_language_service('typescript')\n    \n    return None\n\ndef get_supported_languages() -> List[str]:\n    \"\"\"Get a list of all supported language codes.\"\"\"\n    return registry.get_supported_languages()...\nPath: codehem/core/registry.py\n...\n\nclass Registry:\n    \"\"\"Central registry for CodeHem components.\"\"\"\n    _instance = None\n\n    def __init__(self):\n        self._initialized = False\n        self._initialize()\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Registry, cls).__new__(cls)\n        return cls._instance\n\n    def _initialize(self):\n        \"\"\"Initializes empty registries.\"\"\"\n        if hasattr(self, '_initialized') and self._initialized:\n            return\n        self.language_detectors = {}\n        self.language_services = {}\n        self.all_descriptors = {}\n        self.all_extractors = {}\n        self.all_manipulators = {}\n        self.discovered_modules = set()\n        self.language_service_instances = {}\n        self._initialized = False\n        logger.debug('Registry _initialize completed.')\n...\n\n    def register_language_service(self, cls: Type[LanguageService]):\n        \"\"\"Registers a language service class.\"\"\"\n        try:\n            language_code = cls.LANGUAGE_CODE.lower()\n            if language_code in self.language_services:\n                logger.warning(f\"Language service for '{language_code}' is already registered ({self.language_services[language_code].__name__}). Overwriting with {cls.__name__}.\")\n            self.language_services[language_code] = cls\n            rich.print(f'Registered language service: {cls.__name__} for {language_code}')\n        except Exception as e:\n            logger.error(f'Error during registration of language service {cls.__name__}: {e}', exc_info=True)\n        return cls\n\n    def register_extractor(self, cls: Type[BaseExtractor]):\n        \"\"\"Registers an extractor class.\"\"\"\n        try:\n            language_code = cls.LANGUAGE_CODE.lower()\n            element_type = cls.ELEMENT_TYPE.value.lower()\n            extractor_key = f'{language_code}/{element_type}'\n            if extractor_key in self.all_extractors:\n                logger.warning(f\"Extractor for '{extractor_key}' is already registered ({self.all_extractors[extractor_key].__name__}). Overwriting with {cls.__name__}.\")\n            self.all_extractors[extractor_key] = cls\n            rich.print(f'Registered extractor: {cls.__name__} for {extractor_key}')\n        except Exception as e:\n            logger.error(f'Error during registration of extractor {cls.__name__}: {e}', exc_info=True)\n        return cls\n...\n\n    def initialize_components(self):\n        \"\"\"Discovers and initializes all components. Called once.\"\"\"\n        if self._initialized:\n            logger.debug('Components already initialized.')\n            return\n\n        logger.info('Starting CodeHem component initialization...')\n        self.discover_modules() # Discover components in the main package and subpackages\n        self._initialized = True\n        rich.print(f'Components initialized: {len(self.language_detectors)} detectors, {len(self.language_services)} services, {len(self.all_extractors)} extractors, {len(self.all_manipulators)} manipulators registered.')\n        logger.info('Component initialization finished.')\n\n# Global registry instance\nregistry = Registry()\n\n# Decorators for registration\ndef language_detector(cls):\n    \"\"\"Decorator for registering a language detector.\"\"\"\n    return registry.register_language_detector(cls)\n\ndef language_service(cls):\n    \"\"\"Decorator for registering a language service.\"\"\"\n    return registry.register_language_service(cls)\n\ndef extractor(cls):\n    \"\"\"Decorator for registering an extractor.\"\"\"\n    return registry.register_extractor(cls)\n\ndef manipulator(cls):\n    \"\"\"Decorator for registering a manipulator.\"\"\"\n    return registry.register_manipulator(cls)\n\ndef element_type_descriptor(cls):\n    \"\"\"Decorator for registering an element type descriptor.\"\"\"\n    return registry.register_element_type_descriptor(cls)...\n","isError":false,"requestId":""}},"c1cce3c7-10a5-4772-836a-831a0e17040e;toolu_vrtx_016DNH7HcCqdaxCHGedsyRFZ":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: codehem/core/manipulators/manipulator_base.py\n...\n\nclass ManipulatorBase(ABC):\n    \"\"\"Base class for all language-specific manipulators.\"\"\"\n    LANGUAGE_CODE: str = ''\n    ELEMENT_TYPE: Optional[CodeElementType] = None\n    COMMENT_MARKERS: List[str] = []\n    DECORATOR_MARKERS: List[str] = []\n\n    def __init__(self, language_code: str=None, element_type: CodeElementType=None, formatter: BaseFormatter=None, extraction_service=None):\n        \"\"\"Initialize the manipulator.\"\"\"\n        self.language_code = language_code or self.LANGUAGE_CODE\n        self.element_type = element_type or self.ELEMENT_TYPE\n        self._extraction_service = extraction_service\n        self.formatter = formatter or BaseFormatter()\n        if not self.language_code:\n            raise ValueError('Manipulator requires a language_code.')\n\n    @property\n    def extraction_service(self):\n        \"\"\"Get extraction service, creating it on demand.\"\"\"\n        if self._extraction_service is None:\n            from codehem.core.extraction_service import ExtractionService\n            try:\n                self._extraction_service = ExtractionService(self.language_code)\n            except ValueError as e:\n                logger.error(f'Failed to create ExtractionService for {self.language_code}: {e}')\n                raise\n        return self._extraction_service\n\n    @abstractmethod\n    def add_element(self, original_code: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Add an element to the code. Must be implemented by subclasses.\"\"\"\n        raise NotImplementedError('Subclasses must implement add_element')\n\n    def find_element(self, code: str, element_name: str, parent_name: Optional[str]=None) -> Tuple[int, int]:\n        \"\"\"Find an element in the code using the Extraction Service.\"\"\"\n        if not self.element_type:\n            logger.warning('find_element called without ELEMENT_TYPE set.')\n            return (0, 0)\n        try:\n            return self.extraction_service.find_element(code, self.element_type.value, element_name, parent_name)\n        except Exception as e:\n            logger.error(f'Error finding element ({self.element_type.value}, {element_name}, {parent_name}): {e}')\n            return (0, 0)\n\n    def format_element(self, element_code: str, indent_level: int=0) -> str:\n        \"\"\"Format a code element using the language-specific formatter.\"\"\"\n        if hasattr(self.formatter, 'format_element') and self.element_type:\n            dedented_code = self.formatter.dedent(element_code)\n            formatted_no_base_indent = self.formatter.format_element(self.element_type.value, dedented_code)\n            base_indent = self.formatter.indent_string * indent_level\n            return self.apply_indentation(formatted_no_base_indent, base_indent)\n        indent = ' ' * (self.formatter.indent_size if hasattr(self.formatter, 'indent_size') else 4) * indent_level\n        return self.apply_indentation(element_code.strip(), indent)\n\n    def replace_element(self, original_code: str, element_name: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Replace an element in the code, handling decorators/comments.\"\"\"\n        logger.debug(f\"Replacing {self.element_type} '{element_name}' (parent: {parent_name})\")\n        start_line, end_line = self.find_element(original_code, element_name, parent_name)\n        if start_line == 0 and end_line == 0:\n            logger.info(f\"{self.element_type} '{element_name}' not found. Attempting to add.\")\n            can_add = parent_name or self.element_type in [CodeElementType.FUNCTION, CodeElementType.CLASS, CodeElementType.IMPORT]\n            if can_add:\n                try:\n                    return self.add_element(original_code, new_element, parent_name)\n                except Exception as e:\n                    logger.error(f\"Error adding missing element '{element_name}': {e}\")\n                    return original_code\n            else:\n                logger.warning(f\"Element '{element_name}' not found and cannot be added without parent context.\")\n                return original_code\n        lines = original_code.splitlines()\n        adjusted_start = self._adjust_start_line(lines, start_line)\n        logger.debug(f'Found element at lines {start_line}-{end_line}. Adjusted start: {adjusted_start}')\n        indent_level = self.get_element_indent_level(original_code, adjusted_start, parent_name)\n        formatted_element = self.format_element(new_element, indent_level)\n        return self.replace_lines(original_code, adjusted_start, end_line, formatted_element)\n\n    def remove_element(self, original_code: str, element_name: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Remove an element from the code, handling decorators/comments.\"\"\"\n        logger.debug(f\"Removing {self.element_type} '{element_name}' (parent: {parent_name})\")\n        start_line, end_line = self.find_element(original_code, element_name, parent_name)\n        if start_line == 0 and end_line == 0:\n            logger.warning(f\"Element '{element_name}' not found. Cannot remove.\")\n            return original_code\n        lines = original_code.splitlines()\n        adjusted_start = self._adjust_start_line(lines, start_line)\n        logger.debug(f'Found element for removal at lines {start_line}-{end_line}. Adjusted: {adjusted_start}')\n        return self.replace_lines(original_code, adjusted_start, end_line, '')\n\n    def get_element_indent_level(self, code: str, element_start_line: int, parent_name: Optional[str]=None) -> int:\n        \"\"\"Calculate indentation level for an element.\"\"\"\n        if element_start_line <= 0:\n            return 0\n        lines = code.splitlines()\n        if element_start_line > len(lines):\n            return 0\n        line_index = element_start_line - 1\n        indent_str = self.get_indentation(lines[line_index])\n        indent_size = self.formatter.indent_size if hasattr(self.formatter, 'indent_size') else 4\n        return len(indent_str) // indent_size if indent_size > 0 else 0\n...\nPath: codehem/languages/lang_python/manipulator/import_handler.py\n\"\"\"\nPython import manipulator implementation.\n\"\"\"\nimport re\nimport logging\nfrom typing import Optional, Tuple, List\nfrom codehem.models.enums import CodeElementType\nfrom codehem.core.registry import manipulator\nfrom codehem.core.manipulators.template_import_manipulator import TemplateImportManipulator\n\nlogger = logging.getLogger(__name__)\n\n@manipulator\nclass PythonImportManipulator(TemplateImportManipulator):\n    \"\"\"Manipulator for Python imports.\"\"\"\n    LANGUAGE_CODE = 'python'\n    ELEMENT_TYPE = CodeElementType.IMPORT\n    COMMENT_MARKERS = ['#']\n    \n    def _perform_insertion(self, code: str, formatted_element: str, insertion_point: int, \n                          parent_name: Optional[str]=None) -> str:\n        \"\"\"Add an import to Python code with proper spacing.\"\"\"\n        lines = code.splitlines() if code else []\n...\nPath: codehem/languages/lang_python/manipulator/class_handler.py\n...\n\n@manipulator\nclass PythonClassManipulator(TemplateClassManipulator):\n    \"\"\"Manipulator for Python classes.\"\"\"\n    LANGUAGE_CODE = 'python'\n    ELEMENT_TYPE = CodeElementType.CLASS\n    COMMENT_MARKERS = ['#']\n    DECORATOR_MARKERS = ['@']\n    \n    def _perform_insertion(self, code: str, formatted_element: str, insertion_point: int, \n                          parent_name: Optional[str]=None) -> str:\n        \"\"\"Add a class to Python code with appropriate spacing.\"\"\"\n        if not code:\n            return formatted_element + '\\n'\n            \n        result = super()._perform_insertion(code, formatted_element, insertion_point, parent_name)\n        \n        # Ensure proper spacing and newline at end\n        if not result.endswith('\\n'):\n            result += '\\n'\n            \n        return result...\nPath: codehem/languages/lang_python/manipulator/method_handler.py\n\"\"\"\nPython method manipulator implementation.\n\"\"\"\nimport logging\nfrom typing import Optional\nfrom codehem.models.enums import CodeElementType\nfrom codehem.core.registry import manipulator\nfrom codehem.core.manipulators.template_method_manipulator import TemplateMethodManipulator\n\nlogger = logging.getLogger(__name__)\n\n# @manipulator # Disabled: Using PythonASTManipulator via __init__.py registration\nclass PythonMethodManipulator(TemplateMethodManipulator):\n    \"\"\"Manipulator for Python methods.\"\"\"\n    LANGUAGE_CODE = 'python'\n    ELEMENT_TYPE = CodeElementType.METHOD\n    COMMENT_MARKERS = ['#']\n    DECORATOR_MARKERS = ['@']\n...\nPath: codehem/languages/lang_python/manipulator/base.py\n...\n\n    def __init__(self, element_type: CodeElementType = None, formatter: BaseFormatter = None, \n                 extraction_service = None):\n        \"\"\"Initialize Python manipulator with appropriate formatter.\"\"\"\n        if formatter is None:\n            try:\n                lang_service = registry.get_language_service('python')\n                if lang_service and hasattr(lang_service, 'formatter'):\n                     formatter = lang_service.formatter\n                else:\n\n                     formatter = PythonFormatter()\n            except Exception as e:\n                logger.warning(f\"Could not get PythonFormatter: {e}\")\n\n        super().__init__(\n            language_code=\"python\",\n            element_type=element_type,\n            formatter=formatter,\n            extraction_service=extraction_service,\n        )\n...\nPath: codehem/core/manipulators/template_manipulator.py\n\"\"\"\nTemplate pattern for manipulators to standardize language-specific implementations.\n\"\"\"\nimport logging\nfrom typing import Optional\nfrom codehem.core.manipulators.manipulator_base import ManipulatorBase\n\nlogger = logging.getLogger(__name__)\n\nclass TemplateManipulator(ManipulatorBase):\n    \"\"\"\n    Template method pattern for manipulators.\n    Provides standardized implementations with hooks for language-specific customization.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def replace_element(self, original_code: str, name: str, new_code: str, parent_name: Optional[str] = None) -> str:\n        \"\"\"\n        Replace an existing element (function, method, class, import) by name.\n        If not found, insert the new element.\n\n        Args:\n            original_code: Original source code\n            name: Name of the element to replace\n            new_code: New content for the element\n            parent_name: Optional parent element name (e.g., class name for methods)\n...\n                        end_idx = len(code_lines)\n\n        if start_idx is not None and end_idx is not None:\n            before = code_lines[:start_idx]\n            after = code_lines[end_idx:]\n            new_code_lines = new_code.strip('\\n').splitlines()\n            # Adjust indentation to match existing element\n            indent = ''\n            if before and before[-1].startswith(' '):\n                indent = re.match(r'^(\\s*)', before[-1]).group(1)\n            elif start_idx < len(code_lines):\n                indent = re.match(r'^(\\s*)', code_lines[start_idx]).group(1)\n            new_code_lines = [indent + line if line.strip() else line for line in new_code_lines]\n            result_lines = before + new_code_lines + after\n            return '\\n'.join(result_lines)\n        else:\n            # Element not found, fallback to add\n            return self.add_element(original_code, new_code, parent_name)\n\n    def __init__(self, insert_blank_line_before_element: bool = True, insert_blank_line_after_element: bool = False, handle_docstrings_special: bool = False):\n        self.insert_blank_line_before_element = insert_blank_line_before_element\n        self.insert_blank_line_after_element = insert_blank_line_after_element\n        self.handle_docstrings_special = handle_docstrings_special\n\n    def add_element(self, original_code: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        import re\n\n        lines = original_code.splitlines()\n        indent_level = 0\n        insertion_idx = len(lines)\n...\nPath: codehem/core/manipulation_service.py\n...\n\n    def upsert_element(self, original_code: str, element_type: str, name: str, new_code: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"\n        Add or replace a code element.\n\n        Args:\n        original_code: Original source code\n        element_type: Type of element to add/replace (from CodeElementType)\n        name: Name of the element\n        new_code: New content for the element\n        parent_name: Name of parent element (e.g., class name for methods)\n\n        Returns:\n        Modified code\n        \"\"\"\n        logger.debug(f\"Upserting element of type '{element_type}', name '{name}', parent '{parent_name}'\")\n        manipulator = self.language_service.get_manipulator(element_type)\n...\n\n    def upsert_element_by_xpath(self, original_code: str, xpath: str, new_code: str) -> str:\n        \"\"\"\n        Add or replace an element in the code using XPath expression.\n        \n        Args:\n            original_code: Original source code\n            xpath: XPath expression (e.g., 'ClassName.method_name', 'ClassName[interface].method_name[property_getter]')\n            new_code: New content for the element\n            \n        Returns:\n            Modified code\n        \"\"\"\n        (element_name, parent_name, element_type) = XPathParser.get_element_info(xpath)\n        if not element_type:\n            element_type = self.language_service.detect_element_type(new_code)\n        return self.upsert_element(original_code, element_type, element_name, new_code, parent_name)\n...\n            \n        Returns:\n            Modified code\n        \"\"\"\n        logger.debug(f\"Adding element of type '{element_type}', parent '{parent_name}'\")\n        manipulator = self.language_service.get_manipulator(element_type)\n        if manipulator:\n            if hasattr(manipulator, 'add_element'):\n                return manipulator.add_element(original_code, new_code, parent_name)\n            logger.warning(f\"Manipulator for {element_type} does not implement add_element method\")\n        else:\n            logger.warning(f\"No manipulator found for element type: {element_type}\")\n        return original_code\n...\n            \n        Returns:\n            Modified code\n        \"\"\"\n        logger.debug(f\"Removing element of type '{element_type}', name '{element_name}', parent '{parent_name}'\")\n        manipulator = self.language_service.get_manipulator(element_type)\n        if manipulator:\n            if hasattr(manipulator, 'remove_element'):\n                return manipulator.remove_element(original_code, element_name, parent_name)\n            logger.warning(f\"Manipulator for {element_type} does not implement remove_element method\")\n        else:\n            logger.warning(f\"No manipulator found for element type: {element_type}\")\n        return original_code\n...\nPath: codehem/core/registry.py\n...\n\nclass Registry:\n    \"\"\"Central registry for CodeHem components.\"\"\"\n    _instance = None\n\n    def __init__(self):\n        self._initialized = False\n        self._initialize()\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Registry, cls).__new__(cls)\n        return cls._instance\n\n    def _initialize(self):\n        \"\"\"Initializes empty registries.\"\"\"\n        if hasattr(self, '_initialized') and self._initialized:\n            return\n        self.language_detectors = {}\n        self.language_services = {}\n        self.all_descriptors = {}\n        self.all_extractors = {}\n        self.all_manipulators = {}\n        self.discovered_modules = set()\n        self.language_service_instances = {}\n        self._initialized = False\n        logger.debug('Registry _initialize completed.')\n...\n\n    def register_extractor(self, cls: Type[BaseExtractor]):\n        \"\"\"Registers an extractor class.\"\"\"\n        try:\n            language_code = cls.LANGUAGE_CODE.lower()\n            element_type = cls.ELEMENT_TYPE.value.lower()\n            extractor_key = f'{language_code}/{element_type}'\n            if extractor_key in self.all_extractors:\n                logger.warning(f\"Extractor for '{extractor_key}' is already registered ({self.all_extractors[extractor_key].__name__}). Overwriting with {cls.__name__}.\")\n            self.all_extractors[extractor_key] = cls\n            rich.print(f'Registered extractor: {cls.__name__} for {extractor_key}')\n        except Exception as e:\n            logger.error(f'Error during registration of extractor {cls.__name__}: {e}', exc_info=True)\n        return cls\n\n    def register_manipulator(self, cls):\n        \"\"\"Registers a manipulator class.\"\"\"\n        try:\n            language_code = cls.LANGUAGE_CODE.lower()\n            element_type = cls.ELEMENT_TYPE.value.lower()\n            key = f'{language_code}_{element_type}'\n            if key in self.all_manipulators:\n                logger.warning(f\"Manipulator for '{key}' is already registered ({self.all_manipulators[key].__name__}). Overwriting with {cls.__name__}.\")\n            self.all_manipulators[key] = cls\n            rich.print(f'Registered manipulator: {cls.__name__} for {language_code}/{element_type}')\n        except Exception as e:\n            logger.error(f'Error during registration of manipulator {cls.__name__}: {e}', exc_info=True)\n        return cls\n...\n\n# Global registry instance\nregistry = Registry()\n\n# Decorators for registration\ndef language_detector(cls):\n    \"\"\"Decorator for registering a language detector.\"\"\"\n    return registry.register_language_detector(cls)\n\ndef language_service(cls):\n    \"\"\"Decorator for registering a language service.\"\"\"\n    return registry.register_language_service(cls)\n\ndef extractor(cls):\n    \"\"\"Decorator for registering an extractor.\"\"\"\n    return registry.register_extractor(cls)\n\ndef manipulator(cls):\n    \"\"\"Decorator for registering a manipulator.\"\"\"\n    return registry.register_manipulator(cls)\n\ndef element_type_descriptor(cls):\n    \"\"\"Decorator for registering an element type descriptor.\"\"\"\n    return registry.register_element_type_descriptor(cls)...\n","isError":false,"requestId":""}},"4f7bad50-e6e3-41ff-a6a3-de1a12cc55f7;toolu_vrtx_01Sy4eDQkJEFL25b6dSYYZtc":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: codehem/languages/lang_python/python_ast_manipulator.py\nimport ast\nimport logging\nfrom typing import Optional, List, Tuple, Union, Any\nfrom codehem.core.manipulators.manipulator_base import ManipulatorBase\nfrom codehem.models.enums import CodeElementType\n\nlogger = logging.getLogger(__name__)\n\nclass ReplaceOrInsertTransformer(ast.NodeTransformer):\n    \"\"\"\n    AST Transformer to replace a node at a specific location or insert nodes\n    into a parent node's body. (Version 3: Improved replacement, import block handling)\n    \"\"\"\n    def __init__(self,\n                 target_start_line: Optional[int],\n                 target_end_line: Optional[int],\n                 new_nodes: List[ast.AST],\n                 parent_name: Optional[str],\n                 element_type: CodeElementType,\n                 target_name: str):\n        super().__init__()\n        self.target_start_line = target_start_line\n        self.target_end_line = target_end_line\n        self.new_nodes = new_nodes\n        self.parent_name = parent_name\n        self.element_type = element_type\n        self.target_name = target_name # Name of the element to replace/insert ('all' for import block)\n        self.is_replacing = target_start_line is not None\n...\n\n            logger.debug(f\"Calculated insertion point for {self.element_type.value} at module level: {insert_pos}\")\n\n        return insert_pos\n\n    def visit(self, node):\n        \"\"\"Visit nodes, handling replacement, then visiting children, then insertion.\"\"\"\n        # 1. Handle Replacement (if applicable to the node itself)\n        if self.is_replacing and not self.operation_done and self._is_target_node(node):\n            logger.info(f\"Replacing node {type(node).__name__} (target: {self.target_name}) at line {node.lineno} with {len(self.new_nodes)} new node(s).\")\n            self.operation_done = True\n            return self.new_nodes if self.new_nodes else None # Return list/None for visit_list\n\n        # 2. Visit Children (generic_visit handles recursion)\n        new_node = super().generic_visit(node)\n\n        # 3. Handle Insertion (if applicable within this node's body)\n        # Check node type *after* visiting children, as generic_visit returns the node\n        if new_node is None: # Node might have been deleted by a child visitor? Unlikely here but safe check.\n             return None\n\n        # Check if insertion is intended and hasn't happened yet\n        if not self.is_replacing and not self.operation_done:\n            is_module_target = (self.parent_name is None and isinstance(new_node, ast.Module))\n            is_class_target = (self.parent_name is not None and isinstance(new_node, ast.ClassDef) and new_node.name == self.parent_name)\n...\n\n        # Default processing if not import block replacement\n        node.body = self.visit_list(node.body)\n        # Allow generic_visit to handle potential insertion into the module body\n        return super().generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> Any:\n        node.body = self.visit_list(node.body)\n        # Allow generic_visit to handle potential insertion or replacement of the class itself\n        return super().generic_visit(node)\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> Any:\n        node.body = self.visit_list(node.body)\n        # Allow generic_visit for replacement check of the function itself\n        return super().generic_visit(node)\n\n    def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -> Any:\n        node.body = self.visit_list(node.body)\n         # Allow generic_visit for replacement check of the function itself\n        return super().generic_visit(node)\n\nclass PythonASTManipulator(ManipulatorBase):\n    \"\"\"\n    AST-based manipulator for Python code using ast.NodeTransformer.\n    Supports robust insertion, replacement of classes, functions, methods,\n    properties, and imports. (Version 3)\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n...\n\n    def upsert_element(self, original_code: str, element_type_str: str, name: str, new_code: str, parent_name: Optional[str] = None) -> str:\n        \"\"\" Add or replace a code element using AST transformation. \"\"\"\n        logger.info(f\"AST Upsert: type='{element_type_str}', name='{name}', parent='{parent_name}'\")\n\n        try: element_type = self._get_element_type_for_upsert(element_type_str, new_code)\n        except ValueError as e: logger.error(f\"Cannot perform upsert: {e}\"); return original_code\n\n        # Refine type guess based on context\n        if element_type == CodeElementType.FUNCTION and parent_name: element_type = CodeElementType.METHOD\n        logger.info(f\"Processing as element type: {element_type.value}\")\n...\n            except Exception as e: logger.error(f\"Error parsing new code snippet: {e}\"); return original_code\n        else: logger.debug(\"Proceeding with deletion (new_nodes is empty).\")\n\n        # Apply transformation\n        modified_tree = None\n        transformer = None\n        try:\n            transformer = ReplaceOrInsertTransformer(\n                target_start_line=target_start_line, target_end_line=target_end_line,\n                new_nodes=new_nodes, parent_name=parent_name,\n                element_type=element_type, target_name=name if name != 'all' else None # Pass None name for block replace\n            )\n            modified_tree = transformer.visit(original_tree)\n            if modified_tree is None: logger.info(\"Transformation resulted in empty AST.\"); return \"\\n\"\n            modified_tree = ast.fix_missing_locations(modified_tree)\n\n            if not transformer.operation_done:\n                 action = \"replace/delete\" if is_replacing else \"insert\"\n                 logger.error(f\"Transformer failed to {action} element '{name}' \"\n                              f\"{f'at lines {target_start_line}-{target_end_line}' if is_replacing else f'into parent {parent_name}'}.\")\n                 return original_code # Return original if operation failed\n\n            logger.info(f\"Transformer operation successful: {'Replaced/Deleted' if is_replacing else 'Inserted'}\")\n        except Exception as e:\n            logger.error(f\"Error during AST transformation: {e}\", exc_info=True)\n            return original_code\n...\n\n    def add_element(self, original_code: str, new_code: str, parent_name: Optional[str]=None) -> str:\n        logger.debug(f\"Calling add_element for parent '{parent_name}'\")\n        try:\n            new_tree = ast.parse(new_code.strip())\n            if not new_tree.body: logger.error(\"Cannot add empty element.\"); return original_code\n            node_to_add = new_tree.body[0]\n            temp_name = getattr(node_to_add, 'name', None)\n            # Let upsert handle type deduction by passing \"unknown\"\n            temp_type_str = \"unknown\"\n            if isinstance(node_to_add, (ast.Import, ast.ImportFrom)): temp_name = 'all'\n\n            if temp_name and temp_type_str:\n                return self.upsert_element(original_code, temp_type_str, temp_name, new_code, parent_name)\n            else: logger.error(f\"Could not deduce name/type for add_element: {new_code[:100]}...\")\n        except Exception as e: logger.error(f\"Error preparing for add_element: {e}\")\n        return original_code\n\n    def replace_element(self, original_code: str, name: str, new_code: str, parent_name: Optional[str]=None) -> str:\n        logger.debug(f\"Calling replace_element for '{name}', parent '{parent_name}' - delegating type detection to upsert.\")\n        # Pass \"unknown\" - upsert will try to find existing or deduce from new_code\n        return self.upsert_element(original_code, \"unknown\", name, new_code, parent_name)\n\n    def remove_element(self, original_code: str, name: str, parent_name: Optional[str]=None) -> str:\n        logger.debug(f\"Calling remove_element for '{name}', parent '{parent_name}' - delegating type detection to upsert.\")\n        # Pass \"unknown\" - upsert will try to find the element first to determine type\n        return self.upsert_element(original_code, \"unknown\", name, \"\", parent_name)\n\n    def upsert_element_by_xpath(self, original_code: str, xpath: str, new_code: str) -> str:\n        from codehem.core.engine.xpath_parser import XPathParser\n        logger.debug(f\"Calling upsert_element_by_xpath for '{xpath}'\")\n        try:\n            element_name, parent_name, element_type_str_from_xpath = XPathParser.get_element_info(xpath)\n            op_element_type_str = element_type_str_from_xpath if element_type_str_from_xpath else \"unknown\"\n            op_name = element_name\n            if not op_name and op_element_type_str == CodeElementType.IMPORT.value: op_name = 'all'\n            elif not op_name:\n                 # Try deducing name from new_code if XPath was like '[class]'\n                 try:\n                      new_tree = ast.parse(new_code.strip())\n                      if new_tree.body and hasattr(new_tree.body[0], 'name'): op_name = new_tree.body[0].name\n...\nPath: codehem/languages/lang_python/__init__.py\n\"\"\"\nPython language module for CodeHem.\n\"\"\"\n\nNODE_CONFIG = {\n    'function': {\n        'name_field': 'name',\n        'parameters_field': 'parameters',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'method': {\n        'name_field': 'name',\n        'parameters_field': 'parameters',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'class': {\n        'name_field': 'name',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': None,\n    },\n    'decorator': {\n        'name_field': 'name',\n    },\n    'property_getter': {\n        'name_field': 'name',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'property_setter': {\n        'name_field': 'name',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'static_method': {\n        'name_field': 'name',\n        'parameters_field': 'parameters',\n        'body_field': 'body',\n        'decorators_field': 'decorators',\n        'parent_class_type': 'class_definition',\n    },\n    'import': {\n        'name_field': 'name',  # or 'module' depending on AST\n    },\n}\nfrom codehem.core.registry import registry\nfrom .service import PythonLanguageService\nfrom .manipulator.method_handler import PythonMethodManipulator\nfrom .python_ast_manipulator import PythonASTManipulator\nfrom codehem.models.enums import CodeElementType\nimport logging\n\ndef initialize_python_language():\n    \"\"\"\n    Initialize and register Python language manipulators and services.\n    This function clears existing 'python_' manipulators and registers patched versions.\n    Call this explicitly before using Python language features or running tests.\n    \"\"\"\n    # Clear all existing python manipulators\n    keys_to_remove = [k for k in list(registry.all_manipulators.keys()) if k.startswith('python_')]\n    for k in keys_to_remove:\n        registry.all_manipulators.pop(k, None)\n    logging.debug(f\"Cleared {len(keys_to_remove)} existing python manipulators.\")\n\n    # Register AST manipulators for function, class, import\n    for element_type_enum in [\n        CodeElementType.FUNCTION,\n        CodeElementType.CLASS,\n        CodeElementType.IMPORT,\n    ]:\n        element_type_name = element_type_enum.value.lower()\n        Wrapper = type(\n            f\"Python{element_type_name.capitalize()}ASTManipulator\",\n            (PythonASTManipulator,),\n            {\n                'LANGUAGE_CODE': 'python',\n                'ELEMENT_TYPE': element_type_enum\n            }\n        )\n        registry.register_manipulator(Wrapper)\n        logging.debug(f\"Registered ASTManipulator: Python{element_type_name.capitalize()}ASTManipulator for element_type: {element_type_enum}\")\n\n    # Register PythonASTManipulator for other element types\n    for element_type_enum in [\n        CodeElementType.METHOD,\n        CodeElementType.PROPERTY_GETTER,\n        CodeElementType.PROPERTY_SETTER,\n        CodeElementType.STATIC_PROPERTY,\n    ]:\n        element_type_name = element_type_enum.value.lower()\n        Wrapper = type(\n            f\"Python{element_type_name.capitalize()}ASTManipulator\",\n            (PythonASTManipulator,),\n            {\n                'LANGUAGE_CODE': 'python',\n                'ELEMENT_TYPE': element_type_enum\n            }\n        )\n        registry.register_manipulator(Wrapper)\n        logging.debug(f\"Registered ASTManipulator: Python{element_type_name.capitalize()}ASTManipulator for element_type: {element_type_enum}\")\n\n    # Register the Python language service (if needed elsewhere)\n    # This import ensures the service is available\n    logging.debug(\"Python language initialization complete.\")\n...\nPath: codehem/core/manipulators/manipulator_base.py\n...\n\nclass ManipulatorBase(ABC):\n    \"\"\"Base class for all language-specific manipulators.\"\"\"\n    LANGUAGE_CODE: str = ''\n    ELEMENT_TYPE: Optional[CodeElementType] = None\n    COMMENT_MARKERS: List[str] = []\n    DECORATOR_MARKERS: List[str] = []\n\n    def __init__(self, language_code: str=None, element_type: CodeElementType=None, formatter: BaseFormatter=None, extraction_service=None):\n        \"\"\"Initialize the manipulator.\"\"\"\n        self.language_code = language_code or self.LANGUAGE_CODE\n        self.element_type = element_type or self.ELEMENT_TYPE\n        self._extraction_service = extraction_service\n        self.formatter = formatter or BaseFormatter()\n        if not self.language_code:\n            raise ValueError('Manipulator requires a language_code.')\n\n    @property\n    def extraction_service(self):\n        \"\"\"Get extraction service, creating it on demand.\"\"\"\n        if self._extraction_service is None:\n            from codehem.core.extraction_service import ExtractionService\n            try:\n                self._extraction_service = ExtractionService(self.language_code)\n            except ValueError as e:\n                logger.error(f'Failed to create ExtractionService for {self.language_code}: {e}')\n                raise\n        return self._extraction_service\n\n    @abstractmethod\n    def add_element(self, original_code: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Add an element to the code. Must be implemented by subclasses.\"\"\"\n        raise NotImplementedError('Subclasses must implement add_element')\n...\n\n    def format_element(self, element_code: str, indent_level: int=0) -> str:\n        \"\"\"Format a code element using the language-specific formatter.\"\"\"\n        if hasattr(self.formatter, 'format_element') and self.element_type:\n            dedented_code = self.formatter.dedent(element_code)\n            formatted_no_base_indent = self.formatter.format_element(self.element_type.value, dedented_code)\n            base_indent = self.formatter.indent_string * indent_level\n            return self.apply_indentation(formatted_no_base_indent, base_indent)\n        indent = ' ' * (self.formatter.indent_size if hasattr(self.formatter, 'indent_size') else 4) * indent_level\n        return self.apply_indentation(element_code.strip(), indent)\n\n    def replace_element(self, original_code: str, element_name: str, new_element: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Replace an element in the code, handling decorators/comments.\"\"\"\n        logger.debug(f\"Replacing {self.element_type} '{element_name}' (parent: {parent_name})\")\n        start_line, end_line = self.find_element(original_code, element_name, parent_name)\n        if start_line == 0 and end_line == 0:\n            logger.info(f\"{self.element_type} '{element_name}' not found. Attempting to add.\")\n            can_add = parent_name or self.element_type in [CodeElementType.FUNCTION, CodeElementType.CLASS, CodeElementType.IMPORT]\n            if can_add:\n                try:\n                    return self.add_element(original_code, new_element, parent_name)\n                except Exception as e:\n...\n\n    def remove_element(self, original_code: str, element_name: str, parent_name: Optional[str]=None) -> str:\n        \"\"\"Remove an element from the code, handling decorators/comments.\"\"\"\n        logger.debug(f\"Removing {self.element_type} '{element_name}' (parent: {parent_name})\")\n        start_line, end_line = self.find_element(original_code, element_name, parent_name)\n        if start_line == 0 and end_line == 0:\n            logger.warning(f\"Element '{element_name}' not found. Cannot remove.\")\n            return original_code\n        lines = original_code.splitlines()\n        adjusted_start = self._adjust_start_line(lines, start_line)\n        logger.debug(f'Found element for removal at lines {start_line}-{end_line}. Adjusted: {adjusted_start}')\n        return self.replace_lines(original_code, adjusted_start, end_line, '')\n...\n","isError":false,"requestId":""}},"07e6c1ad-4747-4c74-8cb1-cd69819ab6ac;toolu_vrtx_01E8MjjcYoRPWGpHMQZSUF1m":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on codehem/languages/lang_python/python_ast_manipulator.py:\n     1\timport ast\n     2\timport logging\n     3\tfrom typing import Optional, List, Tuple, Union, Any\n     4\tfrom codehem.core.manipulators.manipulator_base import ManipulatorBase\n     5\tfrom codehem.models.enums import CodeElementType\n     6\t\n     7\tlogger = logging.getLogger(__name__)\n     8\t\n     9\tclass ReplaceOrInsertTransformer(ast.NodeTransformer):\n    10\t    \"\"\"\n    11\t    AST Transformer to replace a node at a specific location or insert nodes\n    12\t    into a parent node's body. (Version 3: Improved replacement, import block handling)\n    13\t    \"\"\"\n    14\t    def __init__(self,\n    15\t                 target_start_line: Optional[int],\n    16\t                 target_end_line: Optional[int],\n    17\t                 new_nodes: List[ast.AST],\n    18\t                 parent_name: Optional[str],\n    19\t                 element_type: CodeElementType,\n    20\t                 target_name: str):\n    21\t        super().__init__()\n    22\t        self.target_start_line = target_start_line\n    23\t        self.target_end_line = target_end_line\n    24\t        self.new_nodes = new_nodes\n    25\t        self.parent_name = parent_name\n    26\t        self.element_type = element_type\n    27\t        self.target_name = target_name # Name of the element to replace/insert ('all' for import block)\n    28\t        self.is_replacing = target_start_line is not None\n    29\t        self.is_import_block_replace = (self.is_replacing and\n    30\t                                        self.element_type == CodeElementType.IMPORT and\n    31\t                                        self.target_name == 'all') # Specific flag for import block\n    32\t        self.operation_done = False # Track if replacement or insertion was performed\n    33\t\n    34\t    def _check_property_decorator(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef], decorator_type: str) -> bool:\n    35\t        \"\"\"Checks for specific property decorators (@property, @name.setter).\"\"\"\n    36\t        if not hasattr(node, 'decorator_list'):\n    37\t            return False\n    38\t        for d in node.decorator_list:\n    39\t            if decorator_type == 'getter':\n    40\t                if isinstance(d, ast.Name) and d.id == 'property':\n    41\t                    return True\n    42\t            elif decorator_type == 'setter':\n    43\t                 # Match @<target_name>.setter - ensure target_name is valid for this check\n    44\t                if self.target_name and isinstance(d, ast.Attribute) and d.attr == 'setter':\n    45\t                    if isinstance(d.value, ast.Name) and d.value.id == self.target_name:\n    46\t                         return True\n    47\t        return False\n    48\t\n    49\t    def _is_target_node(self, node: ast.AST) -> bool:\n    50\t        \"\"\"Check if the node matches the target for replacement (excluding import blocks).\"\"\"\n    51\t        # This method should NOT be used for import block replacement logic.\n    52\t        if not self.is_replacing or self.is_import_block_replace:\n    53\t            return False\n    54\t        if not hasattr(node, 'lineno'): return False\n    55\t\n    56\t        # --- Primary Check: Start Line ---\n    57\t        # Allow slight diff if decorators might affect the FunctionDef/ClassDef lineno\n    58\t        line_match = False\n    59\t        if node.lineno == self.target_start_line:\n    60\t            line_match = True\n    61\t        elif hasattr(node, 'decorator_list') and node.decorator_list:\n    62\t             # Check if node starts shortly after target if decorators are present\n    63\t             if node.lineno > self.target_start_line and (node.lineno - self.target_start_line) <= len(node.decorator_list):\n    64\t                   line_match = True\n    65\t                   logger.debug(f\"Accepting node {getattr(node, 'name', type(node).__name__)} at line {node.lineno} for target line {self.target_start_line} due to decorators.\")\n    66\t\n    67\t        if not line_match: return False\n    68\t\n    69\t        # --- Secondary Check: Type and Name ---\n    70\t        node_name = getattr(node, 'name', None)\n    71\t\n    72\t        if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):\n    73\t            if node_name != self.target_name: return False\n    74\t            if self.element_type == CodeElementType.PROPERTY_GETTER:\n    75\t                return self._check_property_decorator(node, 'getter')\n    76\t            elif self.element_type == CodeElementType.PROPERTY_SETTER:\n    77\t                return self._check_property_decorator(node, 'setter')\n    78\t            elif self.element_type in (CodeElementType.FUNCTION, CodeElementType.METHOD):\n    79\t                 is_prop = self._check_property_decorator(node, 'getter') or self._check_property_decorator(node, 'setter')\n    80\t                 return not is_prop\n    81\t            else: return False\n    82\t\n    83\t        elif isinstance(node, ast.ClassDef):\n    84\t            return self.element_type == CodeElementType.CLASS and node_name == self.target_name\n    85\t\n    86\t        elif isinstance(node, ast.Assign):\n    87\t             targets = getattr(node, 'targets', [])\n    88\t             is_static_prop_match = any(isinstance(t, ast.Name) and t.id == self.target_name for t in targets)\n    89\t             return self.element_type == CodeElementType.STATIC_PROPERTY and is_static_prop_match\n    90\t\n    91\t        # Imports are handled by visit_Module/visit_list for blocks\n    92\t        elif isinstance(node, (ast.Import, ast.ImportFrom)):\n    93\t             return self.element_type == CodeElementType.IMPORT and not self.is_import_block_replace\n    94\t\n    95\t        logger.debug(f\"Node type {type(node).__name__} at line {node.lineno} did not match expected logic for target {self.target_name} ({self.element_type.value})\")\n    96\t        return False\n    97\t\n    98\t    def _find_insertion_point(self, body: List[ast.AST]) -> int:\n    99\t        \"\"\"Determine where to insert the new node(s). (Improved placement)\"\"\"\n   100\t        insert_pos = len(body) # Default: append at the end\n   101\t\n   102\t        def find_after_last(node_types: tuple) -> int:\n   103\t            last_pos = -1\n   104\t            for i, node in enumerate(body):\n   105\t                if isinstance(node, node_types):\n   106\t                    last_pos = i\n   107\t            return last_pos + 1\n   108\t\n   109\t        if self.element_type == CodeElementType.IMPORT:\n   110\t            insert_pos = 0\n   111\t            if body and isinstance(body[0], ast.Expr) and isinstance(body[0].value, ast.Constant) and isinstance(body[0].value.value, str):\n   112\t                insert_pos = 1\n   113\t            while insert_pos < len(body) and isinstance(body[insert_pos], (ast.Import, ast.ImportFrom)):\n   114\t                insert_pos += 1\n   115\t            logger.debug(f\"Calculated insertion point for IMPORT: {insert_pos}\")\n   116\t\n   117\t        elif self.parent_name is not None: # Inserting into a class\n   118\t            insert_pos = 0\n   119\t            if body and isinstance(body[0], ast.Expr) and isinstance(body[0].value, ast.Constant) and isinstance(body[0].value.value, str):\n   120\t                insert_pos = 1\n   121\t            # Static properties right after docstring\n   122\t            while insert_pos < len(body) and isinstance(body[insert_pos], ast.Assign):\n   123\t                insert_pos += 1\n   124\t            if self.element_type == CodeElementType.STATIC_PROPERTY:\n   125\t                 logger.debug(f\"Calculated insertion point for STATIC_PROPERTY in class: {insert_pos}\")\n   126\t                 return insert_pos\n   127\t\n   128\t            # Methods/Properties usually go at the end, but before inner classes if any? Keep it simple: end.\n   129\t            insert_pos = len(body)\n   130\t            logger.debug(f\"Calculated insertion point for {self.element_type.value} in class: {insert_pos}\")\n   131\t\n   132\t        elif self.element_type == CodeElementType.FUNCTION or self.element_type == CodeElementType.CLASS:\n   133\t            insert_pos = find_after_last((ast.Import, ast.ImportFrom))\n   134\t            if body and isinstance(body[0], ast.Expr) and isinstance(body[0].value, ast.Constant) and isinstance(body[0].value.value, str):\n   135\t                 insert_pos = max(1, insert_pos) # Ensure after docstring\n   136\t\n   137\t            last_def_pos = -1\n   138\t            for i, node in enumerate(body):\n   139\t                 if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):\n   140\t                     last_def_pos = i\n   141\t            if last_def_pos != -1:\n   142\t                  # Find the actual index *after* the last definition block\n   143\t                  potential_pos = last_def_pos + 1\n   144\t                  # Simple append after last seems sufficient most times\n   145\t                  insert_pos = max(insert_pos, potential_pos)\n   146\t\n   147\t            logger.debug(f\"Calculated insertion point for {self.element_type.value} at module level: {insert_pos}\")\n   148\t\n   149\t        return insert_pos\n   150\t\n   151\t    def visit(self, node):\n   152\t        \"\"\"Visit nodes, handling replacement, then visiting children, then insertion.\"\"\"\n   153\t        # 1. Handle Replacement (if applicable to the node itself)\n   154\t        if self.is_replacing and not self.operation_done and self._is_target_node(node):\n   155\t            logger.info(f\"Replacing node {type(node).__name__} (target: {self.target_name}) at line {node.lineno} with {len(self.new_nodes)} new node(s).\")\n   156\t            self.operation_done = True\n   157\t            return self.new_nodes if self.new_nodes else None # Return list/None for visit_list\n   158\t\n   159\t        # 2. Visit Children (generic_visit handles recursion)\n   160\t        new_node = super().generic_visit(node)\n   161\t\n   162\t        # 3. Handle Insertion (if applicable within this node's body)\n   163\t        # Check node type *after* visiting children, as generic_visit returns the node\n   164\t        if new_node is None: # Node might have been deleted by a child visitor? Unlikely here but safe check.\n   165\t             return None\n   166\t\n   167\t        # Check if insertion is intended and hasn't happened yet\n   168\t        if not self.is_replacing and not self.operation_done:\n   169\t            is_module_target = (self.parent_name is None and isinstance(new_node, ast.Module))\n   170\t            is_class_target = (self.parent_name is not None and isinstance(new_node, ast.ClassDef) and new_node.name == self.parent_name)\n   171\t\n   172\t            if is_module_target or is_class_target:\n   173\t                if hasattr(new_node, 'body') and isinstance(new_node.body, list):\n   174\t                    logger.info(f\"Attempting to insert new nodes into {'Module' if is_module_target else f'Class {self.parent_name}'}\")\n   175\t                    insert_pos = self._find_insertion_point(new_node.body)\n   176\t\n   177\t                    # Adjust line numbers (simple heuristic)\n   178\t                    base_lineno = 1\n   179\t                    if insert_pos > 0 and hasattr(new_node.body[insert_pos-1], 'end_lineno') and new_node.body[insert_pos-1].end_lineno is not None:\n   180\t                         base_lineno = new_node.body[insert_pos-1].end_lineno + 1\n   181\t                    elif insert_pos < len(new_node.body) and hasattr(new_node.body[insert_pos], 'lineno') and new_node.body[insert_pos].lineno is not None:\n   182\t                         base_lineno = new_node.body[insert_pos].lineno\n   183\t                    elif hasattr(new_node,'lineno') and new_node.lineno is not None:\n   184\t                         base_lineno = new_node.lineno + 1\n   185\t\n   186\t                    logger.debug(f\"Adjusting lineno for new nodes, starting from ~{base_lineno}\")\n   187\t                    current_lineno = base_lineno\n   188\t                    for i, n_node in enumerate(self.new_nodes):\n   189\t                         for child_node in ast.walk(n_node):\n   190\t                              if hasattr(child_node, 'lineno'): child_node.lineno = current_lineno\n   191\t                              if hasattr(child_node, 'col_offset'): child_node.col_offset = 0 # Reset col offset\n   192\t                         # Increment line number for next node based on unparsed lines\n   193\t                         try:\n   194\t                             num_lines = len(ast.unparse(n_node).splitlines())\n   195\t                             current_lineno += num_lines\n   196\t                         except: current_lineno +=1 # Fallback\n   197\t\n   198\t                    # Perform insertion\n   199\t                    original_body_len = len(new_node.body)\n   200\t                    new_node.body = new_node.body[:insert_pos] + self.new_nodes + new_node.body[insert_pos:]\n   201\t                    if len(new_node.body) > original_body_len:\n   202\t                         logger.info(f\"Inserted {len(self.new_nodes)} node(s) at index {insert_pos}.\")\n   203\t                         self.operation_done = True\n   204\t                    else:\n   205\t                         logger.warning(f\"Insertion attempt at index {insert_pos} did not change body length.\")\n   206\t                else:\n   207\t                     logger.error(f\"Target node {type(new_node).__name__} for insertion does not have a list 'body'.\")\n   208\t\n   209\t        return new_node\n   210\t\n   211\t    # visit_list is crucial for handling replacements correctly\n   212\t    def visit_list(self, nodes: List[Any]) -> List[Any]:\n   213\t        new_list = []\n   214\t        for node in nodes:\n   215\t            result = self.visit(node) # visit handles replacement check first\n   216\t            if result is None: # Node deleted\n   217\t                continue\n   218\t            elif isinstance(result, list): # Node replaced by multiple nodes\n   219\t                new_list.extend(result)\n   220\t            else: # Single node returned (original or replaced)\n   221\t                new_list.append(result)\n   222\t        return new_list\n   223\t\n   224\t    # Override visitors for common node types with 'body' lists\n   225\t    def visit_Module(self, node: ast.Module) -> Any:\n   226\t        # Special handling for import block replacement\n   227\t        if self.is_import_block_replace and not self.operation_done:\n   228\t             logger.info(f\"Performing import block replacement (Lines {self.target_start_line}-{self.target_end_line})\")\n   229\t             new_body = []\n   230\t             processed_import_block = False\n   231\t             # Copy nodes before the import block\n   232\t             for i, item in enumerate(node.body):\n   233\t                 if item.lineno < self.target_start_line:\n   234\t                      new_body.append(item) # Keep nodes before the block start\n   235\t                 else:\n   236\t                      break # Reached the block\n   237\t\n   238\t             # Insert new import nodes\n   239\t             if self.new_nodes:\n   240\t                  logger.debug(f\"Inserting {len(self.new_nodes)} new import nodes.\")\n   241\t                  # Adjust lineno heuristically\n   242\t                  base_lineno = new_body[-1].end_lineno + 1 if new_body and hasattr(new_body[-1],'end_lineno') else 1\n   243\t                  current_lineno = base_lineno\n   244\t                  for i, n_node in enumerate(self.new_nodes):\n   245\t                       for child_node in ast.walk(n_node):\n   246\t                            if hasattr(child_node, 'lineno'): child_node.lineno = current_lineno\n   247\t                            if hasattr(child_node, 'col_offset'): child_node.col_offset = 0\n   248\t                       try: num_lines = len(ast.unparse(n_node).splitlines()); current_lineno += num_lines\n   249\t                       except: current_lineno += 1\n   250\t                  new_body.extend(self.new_nodes)\n   251\t\n   252\t             # Skip original nodes within the replaced block range\n   253\t             for i, item in enumerate(node.body):\n   254\t                 if item.lineno >= self.target_start_line and hasattr(item, 'end_lineno') and item.end_lineno <= self.target_end_line:\n   255\t                      continue # Skip nodes within the block\n   256\t                 # Special case: node starts within block but ends after (unlikely for imports)\n   257\t                 elif item.lineno >= self.target_start_line and item.lineno <= self.target_end_line:\n   258\t                      continue\n   259\t                 # Keep nodes after the block\n   260\t                 elif item.lineno > self.target_end_line:\n   261\t                      new_body.append(item)\n   262\t\n   263\t             node.body = self.visit_list(new_body) # Visit the newly constructed body\n   264\t             self.operation_done = True # Mark operation as done\n   265\t             return node # Return the modified node\n   266\t\n   267\t        # Default processing if not import block replacement\n   268\t        node.body = self.visit_list(node.body)\n   269\t        # Allow generic_visit to handle potential insertion into the module body\n   270\t        return super().generic_visit(node)\n   271\t\n   272\t    def visit_ClassDef(self, node: ast.ClassDef) -> Any:\n   273\t        node.body = self.visit_list(node.body)\n   274\t        # Allow generic_visit to handle potential insertion or replacement of the class itself\n   275\t        return super().generic_visit(node)\n   276\t\n   277\t    def visit_FunctionDef(self, node: ast.FunctionDef) -> Any:\n   278\t        node.body = self.visit_list(node.body)\n   279\t        # Allow generic_visit for replacement check of the function itself\n   280\t        return super().generic_visit(node)\n   281\t\n   282\t    def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -> Any:\n   283\t        node.body = self.visit_list(node.body)\n   284\t         # Allow generic_visit for replacement check of the function itself\n   285\t        return super().generic_visit(node)\n   286\t\n   287\tclass PythonASTManipulator(ManipulatorBase):\n   288\t    \"\"\"\n   289\t    AST-based manipulator for Python code using ast.NodeTransformer.\n   290\t    Supports robust insertion, replacement of classes, functions, methods,\n   291\t    properties, and imports. (Version 3)\n   292\t    \"\"\"\n   293\t\n   294\t    def __init__(self, *args, **kwargs):\n   295\t        super().__init__(*args, **kwargs)\n   296\t\n   297\t    def _get_element_type_for_upsert(self, element_type_str: str, new_code: str) -> CodeElementType:\n   298\t        \"\"\"Determine the CodeElementType enum.\"\"\"\n   299\t        if element_type_str and element_type_str != 'unknown':\n   300\t             try: return CodeElementType(element_type_str)\n   301\t             except ValueError: logger.warning(f\"Invalid element_type string '{element_type_str}'. Attempting detection.\")\n   302\t\n   303\t        stripped_code = new_code.strip()\n   304\t        if not stripped_code:\n   305\t             if element_type_str and element_type_str != 'unknown':\n   306\t                  try: return CodeElementType(element_type_str) # Use provided type if deleting\n   307\t                  except ValueError: pass\n   308\t             raise ValueError(\"Cannot determine element type for deletion without explicit type or parsable new_code.\")\n   309\t\n   310\t        if stripped_code.startswith(('def ', 'async def')):\n   311\t             # Needs context (parent_name) to be METHOD vs FUNCTION. Default to FUNCTION.\n   312\t             return CodeElementType.FUNCTION\n   313\t        elif stripped_code.startswith('class '): return CodeElementType.CLASS\n   314\t        elif stripped_code.startswith(('import ', 'from ')): return CodeElementType.IMPORT\n   315\t        elif '=' in stripped_code.splitlines()[0]: return CodeElementType.STATIC_PROPERTY\n   316\t\n   317\t        logger.error(f\"Could not determine element type for upsert from '{element_type_str}' or code snippet.\")\n   318\t        raise ValueError(f\"Invalid or undetectable element type: {element_type_str}\")\n   319\t\n   320\t    def upsert_element(self, original_code: str, element_type_str: str, name: str, new_code: str, parent_name: Optional[str] = None) -> str:\n   321\t        \"\"\" Add or replace a code element using AST transformation. \"\"\"\n   322\t        logger.info(f\"AST Upsert: type='{element_type_str}', name='{name}', parent='{parent_name}'\")\n   323\t\n   324\t        try: element_type = self._get_element_type_for_upsert(element_type_str, new_code)\n   325\t        except ValueError as e: logger.error(f\"Cannot perform upsert: {e}\"); return original_code\n   326\t\n   327\t        # Refine type guess based on context\n   328\t        if element_type == CodeElementType.FUNCTION and parent_name: element_type = CodeElementType.METHOD\n   329\t        logger.info(f\"Processing as element type: {element_type.value}\")\n   330\t\n   331\t        target_start_line, target_end_line = None, None\n   332\t        is_replacing = False\n   333\t        is_deleting = not new_code.strip()\n   334\t\n   335\t        # Find existing element range\n   336\t        if name and name != 'all':\n   337\t            try:\n   338\t                 search_types = [element_type]\n   339\t                 # Add alternatives if initial type might be ambiguous\n   340\t                 if element_type == CodeElementType.METHOD: search_types.extend([CodeElementType.PROPERTY_GETTER, CodeElementType.PROPERTY_SETTER])\n   341\t                 elif element_type == CodeElementType.FUNCTION and parent_name: search_types.append(CodeElementType.METHOD)\n   342\t\n   343\t                 for search_type in search_types:\n   344\t                      start, end = self.extraction_service.find_element(original_code, search_type.value, name, parent_name)\n   345\t                      if start > 0:\n   346\t                           target_start_line, target_end_line = start, end\n   347\t                           if search_type != element_type:\n   348\t                                logger.info(f\"Adjusting type to found type: {search_type.value}\")\n   349\t                                element_type = search_type # Correct type based on finding\n   350\t                           break\n   351\t                 if target_start_line is not None:\n   352\t                     is_replacing = True\n   353\t                     action = \"DELETE\" if is_deleting else \"REPLACE\"\n   354\t                     logger.info(f\"Planning to {action} existing element '{name}' (type {element_type.value}) at lines {target_start_line}-{target_end_line}\")\n   355\t                 else:\n   356\t                     if is_deleting: logger.error(f\"Cannot delete element '{name}': Not found.\"); return original_code\n   357\t                     logger.info(f\"Element '{name}' not found. Planning to INSERT.\")\n   358\t            except Exception as e:\n   359\t                 logger.error(f\"Error finding element '{name}': {e}. Assuming insertion.\")\n   360\t                 if is_deleting: return original_code\n   361\t        elif element_type == CodeElementType.IMPORT:\n   362\t             try:\n   363\t                 target_start_line, target_end_line = self.extraction_service._find_import_block_range(original_code)\n   364\t                 if target_start_line == 0: target_start_line, target_end_line = None, None\n   365\t                 if target_start_line is not None:\n   366\t                     is_replacing = True\n   367\t                     action = \"DELETE\" if is_deleting else \"REPLACE\"\n   368\t                     logger.info(f\"Planning to {action} import block at lines {target_start_line}-{target_end_line}\")\n   369\t                 elif is_deleting: logger.warning(\"Cannot delete import block: Not found.\"); return original_code\n   370\t                 else: logger.info(\"Import block not found. Planning to INSERT import(s).\")\n   371\t             except Exception as e:\n   372\t                 logger.error(f\"Error finding import block range: {e}. Assuming insertion.\")\n   373\t                 if is_deleting: return original_code\n   374\t        else: # No name / not import block\n   375\t             if is_deleting: logger.error(f\"Cannot delete element: No name specified.\"); return original_code\n   376\t             logger.info(f\"No valid name for replacement. Planning to INSERT.\")\n   377\t\n   378\t        # Parse original code\n   379\t        try: original_tree = ast.fix_missing_locations(ast.parse(original_code))\n   380\t        except SyntaxError as e: logger.error(f\"Syntax error in original code: {e}\"); return original_code\n   381\t\n   382\t        # Parse new code snippet (or handle deletion)\n   383\t        new_nodes: List[ast.AST] = []\n   384\t        if not is_deleting:\n   385\t            try:\n   386\t                new_code_stripped = new_code.strip()\n   387\t                if not new_code_stripped: raise ValueError(\"Cannot upsert empty code snippet unless deleting.\")\n   388\t                new_tree = ast.parse(new_code_stripped); new_nodes = new_tree.body\n   389\t                if not isinstance(new_nodes, list): new_nodes = [new_nodes]\n   390\t                if not new_nodes: logger.warning(\"New code snippet parsed into an empty list of nodes. Treating as deletion if replacing.\")\n   391\t                if not new_nodes and is_replacing: is_deleting = True\n   392\t                elif not new_nodes and not is_replacing: raise ValueError(\"Cannot insert empty parsed nodes.\")\n   393\t            except SyntaxError as e: logger.error(f\"Syntax error in new code snippet: {e}\"); return original_code\n   394\t            except Exception as e: logger.error(f\"Error parsing new code snippet: {e}\"); return original_code\n   395\t        else: logger.debug(\"Proceeding with deletion (new_nodes is empty).\")\n   396\t\n   397\t        # Apply transformation\n   398\t        modified_tree = None\n   399\t        transformer = None\n   400\t        try:\n   401\t            transformer = ReplaceOrInsertTransformer(\n   402\t                target_start_line=target_start_line, target_end_line=target_end_line,\n   403\t                new_nodes=new_nodes, parent_name=parent_name,\n   404\t                element_type=element_type, target_name=name if name != 'all' else None # Pass None name for block replace\n   405\t            )\n   406\t            modified_tree = transformer.visit(original_tree)\n   407\t            if modified_tree is None: logger.info(\"Transformation resulted in empty AST.\"); return \"\\n\"\n   408\t            modified_tree = ast.fix_missing_locations(modified_tree)\n   409\t\n   410\t            if not transformer.operation_done:\n   411\t                 action = \"replace/delete\" if is_replacing else \"insert\"\n   412\t                 logger.error(f\"Transformer failed to {action} element '{name}' \"\n   413\t                              f\"{f'at lines {target_start_line}-{target_end_line}' if is_replacing else f'into parent {parent_name}'}.\")\n   414\t                 return original_code # Return original if operation failed\n   415\t\n   416\t            logger.info(f\"Transformer operation successful: {'Replaced/Deleted' if is_replacing else 'Inserted'}\")\n   417\t        except Exception as e:\n   418\t            logger.error(f\"Error during AST transformation: {e}\", exc_info=True)\n   419\t            return original_code\n   420\t\n   421\t        # Unparse the modified tree\n   422\t        try:\n   423\t            if not isinstance(modified_tree, ast.AST):\n   424\t                 logger.error(f\"Transformation resulted in non-AST type: {type(modified_tree)}. Cannot unparse.\")\n   425\t                 return original_code\n   426\t            new_source = ast.unparse(modified_tree)\n   427\t            if new_source and not new_source.endswith('\\n'): new_source += '\\n'\n   428\t            logger.info(\"Unparsing successful.\")\n   429\t            # --- Debug comparison ---\n   430\t            # if new_source == original_code:\n   431\t            #      logger.warning(\"Code seems unchanged after upsert operation.\")\n   432\t            # else:\n   433\t            #      logger.info(\"Code modified.\")\n   434\t            # ----------------------\n   435\t            return new_source\n   436\t        except Exception as e:\n   437\t            logger.error(f\"Error unparsing modified AST: {e}\", exc_info=True)\n   438\t            return original_code\n   439\t\n   440\t    def add_element(self, original_code: str, new_code: str, parent_name: Optional[str]=None) -> str:\n   441\t        logger.debug(f\"Calling add_element for parent '{parent_name}'\")\n   442\t        try:\n   443\t            new_tree = ast.parse(new_code.strip())\n   444\t            if not new_tree.body: logger.error(\"Cannot add empty element.\"); return original_code\n   445\t            node_to_add = new_tree.body[0]\n   446\t            temp_name = getattr(node_to_add, 'name', None)\n   447\t            # Let upsert handle type deduction by passing \"unknown\"\n   448\t            temp_type_str = \"unknown\"\n   449\t            if isinstance(node_to_add, (ast.Import, ast.ImportFrom)): temp_name = 'all'\n   450\t\n   451\t            if temp_name and temp_type_str:\n   452\t                return self.upsert_element(original_code, temp_type_str, temp_name, new_code, parent_name)\n   453\t            else: logger.error(f\"Could not deduce name/type for add_element: {new_code[:100]}...\")\n   454\t        except Exception as e: logger.error(f\"Error preparing for add_element: {e}\")\n   455\t        return original_code\n   456\t\n   457\t    def replace_element(self, original_code: str, name: str, new_code: str, parent_name: Optional[str]=None) -> str:\n   458\t        logger.debug(f\"Calling replace_element for '{name}', parent '{parent_name}' - delegating type detection to upsert.\")\n   459\t        # Pass \"unknown\" - upsert will try to find existing or deduce from new_code\n   460\t        return self.upsert_element(original_code, \"unknown\", name, new_code, parent_name)\n   461\t\n   462\t    def remove_element(self, original_code: str, name: str, parent_name: Optional[str]=None) -> str:\n   463\t        logger.debug(f\"Calling remove_element for '{name}', parent '{parent_name}' - delegating type detection to upsert.\")\n   464\t        # Pass \"unknown\" - upsert will try to find the element first to determine type\n   465\t        return self.upsert_element(original_code, \"unknown\", name, \"\", parent_name)\n   466\t\n   467\t    def upsert_element_by_xpath(self, original_code: str, xpath: str, new_code: str) -> str:\n   468\t        from codehem.core.engine.xpath_parser import XPathParser\n   469\t        logger.debug(f\"Calling upsert_element_by_xpath for '{xpath}'\")\n   470\t        try:\n   471\t            element_name, parent_name, element_type_str_from_xpath = XPathParser.get_element_info(xpath)\n   472\t            op_element_type_str = element_type_str_from_xpath if element_type_str_from_xpath else \"unknown\"\n   473\t            op_name = element_name\n   474\t            if not op_name and op_element_type_str == CodeElementType.IMPORT.value: op_name = 'all'\n   475\t            elif not op_name:\n   476\t                 # Try deducing name from new_code if XPath was like '[class]'\n   477\t                 try:\n   478\t                      new_tree = ast.parse(new_code.strip())\n   479\t                      if new_tree.body and hasattr(new_tree.body[0], 'name'): op_name = new_tree.body[0].name\n   480\t                      else: raise ValueError(\"Cannot determine name for XPath upsert.\")\n   481\t                 except Exception as parse_err:\n   482\t                      logger.error(f\"Could not deduce name from new code for XPath '{xpath}': {parse_err}\")\n   483\t                      raise ValueError(f\"Cannot upsert via XPath '{xpath}' without name.\")\n   484\t\n   485\t            return self.upsert_element(original_code, op_element_type_str, op_name, new_code, parent_name)\n   486\t        except Exception as e:\n   487\t             logger.error(f\"Error processing XPath upsert for '{xpath}': {e}\", exc_info=True)\n   488\t             return original_code\nTotal lines in file: 488\n","isError":false,"requestId":""}}},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"mentioned_items":[],"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":true,"extraData":{"isAgentConversation":true,"hasDirtyEdits":false}}},"agentExecutionMode":"manual","isAgentEditsCollapsed":true,"shouldDisplayAgentBanner":false,"hasNotUsedAgent":false}" />
      </map>
    </option>
  </component>
</project>