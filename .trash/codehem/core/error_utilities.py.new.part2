    def _get_severity_for_exception(self, exception: Exception) -> str:
        """
        Get the severity level for an exception.
        
        Args:
            exception: The exception to match
            
        Returns:
            A severity level string
        """
        exception_type = type(exception)
        
        # Direct match
        if exception_type in self._severity_mapping:
            return self._severity_mapping[exception_type]
        
        # Check for match by inheritance
        for base_type, severity in self._severity_mapping.items():
            if isinstance(exception, base_type):
                return severity
        
        # Default severity
        return ErrorSeverity.ERROR
    
    def _get_details_for_exception(self, exception: Exception) -> str:
        """
        Get technical details for an exception.
        
        Args:
            exception: The exception to get details for
            
        Returns:
            A formatted string with technical details
        """
        details = []
        
        # Add exception type and message
        details.append(f"Exception type: {type(exception).__name__}")
        details.append(f"Message: {str(exception)}")
        
        # Add relevant attributes
        attributes = []
        for attr in dir(exception):
            if not attr.startswith('_') and not callable(getattr(exception, attr)):
                value = getattr(exception, attr)
                if value is not None and attr != 'args':
                    attributes.append(f"{attr}: {value}")
        
        if attributes:
            details.append("Attributes:")
            details.extend([f"  {attr}" for attr in attributes])
        
        # Add context for CodeHemError
        if isinstance(exception, CodeHemError) and hasattr(exception, 'context'):
            context_items = [f"{k}: {v}" for k, v in exception.context.items()]
            if context_items:
                details.append("Context:")
                details.extend([f"  {item}" for item in context_items])
        
        # Join all details
        return "\n".join(details)


# Create a global instance of ErrorFormatter
error_formatter = ErrorFormatter()


def format_user_friendly_error(
    exception: Exception, 
    include_details: bool = False
) -> UserFriendlyError:
    """
    Format an exception as a user-friendly error.
    
    This is a convenience function for using the global error formatter.
    
    Args:
        exception: The exception to format
        include_details: Whether to include technical details
        
    Returns:
        A UserFriendlyError object
        
    Example:
        ```python
        try:
            # Some operation that might fail
        except Exception as e:
            error = format_user_friendly_error(e)
            print(error.format())
        ```
    """
    return error_formatter.format_exception(exception, include_details)


def format_error_message(
    exception: Exception, 
    include_details: bool = False
) -> str:
    """
    Format an exception as a user-friendly error message string.
    
    This is a convenience function for using the global error formatter.
    
    Args:
        exception: The exception to format
        include_details: Whether to include technical details
        
    Returns:
        A formatted error string
        
    Example:
        ```python
        try:
            # Some operation that might fail
        except Exception as e:
            error_msg = format_error_message(e)
            print(error_msg)
        ```
    """
    return error_formatter.format_exception_as_string(exception, include_details)


def format_error_for_api(
    exception: Exception, 
    include_details: bool = False
) -> Dict[str, Any]:
    """
    Format an exception as a dictionary for API responses.
    
    This is a convenience function for using the global error formatter.
    
    Args:
        exception: The exception to format
        include_details: Whether to include technical details
        
    Returns:
        A dictionary representation of the error
        
    Example:
        ```python
        try:
            # Some operation that might fail
        except Exception as e:
            error_dict = format_error_for_api(e)
            return jsonify({"error": error_dict})
        ```
    """
    return error_formatter.format_exception_as_dict(exception, include_details)


def with_friendly_errors(func: Callable[..., T]) -> Callable[..., T]:
    """
    Decorator to catch and format exceptions as user-friendly errors.
    
    This decorator catches exceptions, formats them using the global error
    formatter, and re-raises them as RuntimeError with friendly formatting.
    
    Args:
        func: The function to wrap
        
    Returns:
        A decorated function that formats errors
        
    Example:
        ```python
        @with_friendly_errors
        def process_data(data):
            # Implementation...
        ```
    """
    @functools.wraps(func)
    def wrapper(*args: Any, **kwargs: Any) -> T:
        try:
            return func(*args, **kwargs)
        except Exception as e:
            # Format the exception
            friendly_error = format_user_friendly_error(e)
            
            # Raise a new exception with the formatted error
            raise RuntimeError(friendly_error.format()) from e
    
    return wrapper

#=====================================================================
# SECTION 6: BATCH ERROR HANDLING
#=====================================================================
"""
This section provides utilities for handling errors during batch operations,
including error collection, statistics, and batch processing functions.
"""

#---------------------------------------------------------------------
# 6.1 Error Collection
#---------------------------------------------------------------------

class BatchOperationError(Exception):
    """
    Exception raised when a batch operation encounters multiple errors.
    
    This exception aggregates multiple errors from a batch operation into
    a single exception that can be raised.
    """
    
    def __init__(self, error_collection: 'ErrorCollection'):
        """
        Initialize with an error collection.
        
        Args:
            error_collection: The collection of errors
        """
        self.error_collection = error_collection
        message = f"Batch operation failed with {len(error_collection)} errors"
        super().__init__(message)
    
    def __str__(self) -> str:
        """Return a string representation of the error."""
        return self.error_collection.format(include_details=False)


class ErrorCollection:
    """
    Container for collecting multiple errors during batch operations.
    
    This class allows batch operations to continue processing items even when
    some fail, collecting all errors for later reporting.
    """
    
    def __init__(self):
        """Initialize an empty error collection."""
        self.errors = []
        self.logger = logging.getLogger('codehem.error_collection')
    
    def add(
        self, 
        error: Exception, 
        item: Optional[Any] = None, 
        operation: Optional[str] = None
    ) -> None:
        """
        Add an error to the collection.
        
        Args:
            error: The exception to add
            item: The item being processed when the error occurred
            operation: The operation being performed when the error occurred
        """
        self.errors.append({
            'error': error,
            'item': item,
            'operation': operation,
            'timestamp': time.time()
        })
        
        # Log the error
        self.logger.error(
            f"Error {len(self.errors)} collecting for batch operation: "
            f"{type(error).__name__}: {str(error)}"
        )
    
    def is_empty(self) -> bool:
        """
        Check if the collection is empty.
        
        Returns:
            True if no errors have been collected, False otherwise
        """
        return len(self.errors) == 0
    
    def count(self) -> int:
        """
        Get the number of errors in the collection.
        
        Returns:
            The number of errors
        """
        return len(self.errors)
    
    def get_errors(self) -> List[Dict[str, Any]]:
        """
        Get all errors in the collection.
        
        Returns:
            A list of error dictionaries
        """
        return self.errors
    
    def get_exceptions(self) -> List[Exception]:
        """
        Get just the exception objects from the collection.
        
        Returns:
            A list of exceptions
        """
        return [entry['error'] for entry in self.errors]
    
    def format(self, include_details: bool = False) -> str:
        """
        Format all errors as a string.
        
        Args:
            include_details: Whether to include technical details
            
        Returns:
            A formatted string with all errors
        """
        if not self.errors:
            return "No errors collected"
        
        lines = [f"Collected {len(self.errors)} errors:"]
        
        for i, entry in enumerate(self.errors, 1):
            error = entry['error']
            item = entry['item']
            operation = entry['operation']
            
            # Format the error
            friendly_error = format_user_friendly_error(error, include_details)
            error_str = friendly_error.format(include_details)
            
            # Format the entry
            entry_lines = [f"Error {i}:"]
            if operation:
                entry_lines.append(f"Operation: {operation}")
            if item is not None:
                item_str = repr(item) if len(repr(item)) < 100 else f"{repr(item)[:97]}..."
                entry_lines.append(f"Item: {item_str}")
            
            # Add the formatted error
            for line in error_str.split('\n'):
                entry_lines.append(f"  {line}")
            
            # Add a separator
            entry_str = '\n'.join(entry_lines)
            lines.append(entry_str)
            lines.append('-' * 40)
        
        return '\n'.join(lines)
    
    def raise_combined_error(self) -> None:
        """
        Raise a combined error with all collected errors.
        
        This aggregates all errors into a single BatchOperationError.
        
        Raises:
            BatchOperationError: If there are any errors in the collection
        """
        if not self.errors:
            return
        
        raise BatchOperationError(self)
    
    def __bool__(self) -> bool:
        """
        Check if the collection has any errors.
        
        Returns:
            True if there are errors, False otherwise
        """
        return bool(self.errors)
    
    def __len__(self) -> int:
        """
        Get the number of errors in the collection.
        
        Returns:
            The number of errors
        """
        return len(self.errors)
    
    def __iter__(self):
        """
        Iterate over errors in the collection.
        
        Yields:
            Error entries (dictionaries)
        """
        return iter(self.errors)

#---------------------------------------------------------------------
# 6.2 Batch Processing
#---------------------------------------------------------------------

def batch_process(
    items: List[Any],
    process_func: Callable[[Any], Any],
    error_handler: Optional[Callable[[Exception, Any], None]] = None,
    max_errors: Optional[int] = None,
    raise_on_error: bool = False,
    operation_name: Optional[str] = None,
    logger: Optional[logging.Logger] = None
) -> Tuple[List[Any], ErrorCollection]:
    """
    Process a batch of items, collecting errors for failures.
    
    This function allows batch operations to continue even when some items fail,
    collecting all errors for later reporting.
    
    Args:
        items: The items to process
        process_func: Function to process each item
        error_handler: Optional function to handle errors for each item
        max_errors: Maximum number of errors before aborting (None for no limit)
        raise_on_error: Whether to raise an exception if any errors occur
        operation_name: Name of the operation for logging and error messages
        logger: Optional logger to use
        
    Returns:
        A tuple of (successful_results, error_collection)
        
    Raises:
        BatchOperationError: If raise_on_error is True and any errors occur
        
    Example:
        ```python
        def process_item(item):
            # Implementation...
            
        results, errors = batch_process(items, process_item)
        if errors:
            print(errors.format())
        else:
            print(f"All {len(results)} items processed successfully")
        ```
    """
    # Initialize the error collection
    errors = ErrorCollection()
    
    # Initialize the results list
    results = []
    
    # Get a logger
    log = logger or logging.getLogger('codehem.batch_process')
    
    # Process each item
    for i, item in enumerate(items):
        try:
            # Process the item
            result = process_func(item)
            results.append(result)
            
            # Log the success
            log.debug(f"Successfully processed item {i+1}/{len(items)}")
            
        except Exception as e:
            # Add the error to the collection
            errors.add(e, item, operation_name)
            
            # Call the error handler if provided
            if error_handler:
                try:
                    error_handler(e, item)
                except Exception as handler_error:
                    log.warning(
                        f"Error in error handler for item {i+1}/{len(items)}: "
                        f"{type(handler_error).__name__}: {str(handler_error)}"
                    )
            
            # Check if we've reached the maximum number of errors
            if max_errors is not None and len(errors) >= max_errors:
                log.warning(
                    f"Reached maximum number of errors ({max_errors}), "
                    f"aborting batch operation"
                )
                break
    
    # Raise an exception if requested and there are errors
    if raise_on_error and errors:
        raise BatchOperationError(errors)
    
    # Return the results and error collection
    return results