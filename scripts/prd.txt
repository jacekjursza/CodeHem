# CodeHem PRD (Product Requirements Document)

## Overview

CodeHem is a language-agnostic library designed for sophisticated querying and manipulation of source code across multiple programming languages. The name "CodeHem" suggests code-hemming - the process of altering or adjusting code with precision, like hemming a garment.

## Problem Statement

Developers and tools working with source code frequently need to:
1. Locate specific code elements (functions, classes, methods, properties, etc.)
2. Modify code elements programmatically while preserving syntax integrity
3. Work with multiple programming languages using a consistent API
4. Analyze code structure in a standardized way

Existing solutions often:
- Are language-specific
- Use regex patterns that can break with syntax changes
- Have complex APIs that differ between languages
- Don't preserve code style during modifications

## Project Goals

CodeHem aims to provide:
1. A unified API for code querying and manipulation across multiple languages
2. Syntax-aware operations using AST (Abstract Syntax Tree) parsing
3. Automatic language detection from file extensions or code analysis
4. Preservation of code formatting and style during modifications
5. A simple, intuitive interface for common code operations

## Core Features

### 1. Advanced Code Querying
- Find functions, classes, methods, properties by name
- Locate code elements using XPath-like expressions
- Extract code elements as structured data models
- Query all code elements of specific type (e.g., all classes)

### 2. Powerful Code Manipulation
- Replace code elements while preserving formatting
- Add new code elements (functions, methods, etc.) with proper indentation
- Remove code elements safely
- Transform code elements (e.g., convert function to async/await)

### 3. Language Support
- Python (initial support)
- TypeScript/JavaScript (including TSX)
- Support for additional languages through plugin architecture

### 4. Developer Experience
- Simple, intuitive high-level API
- Detailed documentation with examples
- Command-line interface for quick operations
- Comprehensive test suite

## Technical Requirements

### Architecture
- Layered architecture with separation of concerns
- Clearly defined interfaces between components
- Plugin system for language extensions
- Tree-sitter integration for AST handling

### Performance
- Efficient parsing of large code files
- Caching mechanisms for repeated operations
- Memory-efficient representation of code elements

### Quality
- Comprehensive test coverage across supported languages
- Well-documented code with type annotations
- Clear error messages and proper error handling

## Implementation Phases

### Phase 1: Core Framework
- Basic architecture and interfaces
- Python language support
- Core querying and manipulation operations